<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yol</title>
  
  <subtitle>睡到自然醒，悠然见南山~</subtitle>
  <link href="https://xu-zi-kang.github.io/atom.xml" rel="self"/>
  
  <link href="https://xu-zi-kang.github.io/"/>
  <updated>2024-03-28T11:03:41.113Z</updated>
  <id>https://xu-zi-kang.github.io/</id>
  
  <author>
    <name>yol</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【面试】深圳众云网</title>
    <link href="https://xu-zi-kang.github.io/2024/03/28/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E6%B7%B1%E5%9C%B3%E4%BC%97%E4%BA%91%E7%BD%91/"/>
    <id>https://xu-zi-kang.github.io/2024/03/28/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E6%B7%B1%E5%9C%B3%E4%BC%97%E4%BA%91%E7%BD%91/</id>
    <published>2024-03-28T11:03:18.000Z</published>
    <updated>2024-03-28T11:03:41.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深圳众云面试"><a href="#深圳众云面试" class="headerlink" title="深圳众云面试"></a>深圳众云面试</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1.自我介绍"></a>1.自我介绍</h2><p>对售前工程师的理解：链接销售和研发之间的纽带&#x2F;桥梁</p><p>对行业的理解：可以说一下对网络安全行业的看法、对行业前景的可观性。</p><p>对公司的了解：提前去网上了解下你面试的公司，大概就能说出一些了</p><p>专业技能：虽说售前不需要你去敲代码，但是你有些产品类的售前是需要具备产品环境部署能力的，这个时候你可以把你在学校学的一些专业课程挑些来说。另外，售前的工作几乎全部依赖于Office，所以你也可以说说你的Office的熟练程度；</p><p>优缺点：尽量往售前工程师招聘要求的去说你的优点，比如自己的沟通表达能力、文字功底能力、学习理解能力等等；</p><p>职业规划：大部分面试官都会问这个问题吧，分长期和短期的来说下你的职业规划。：想干技术和其他领域交织的，技术➕产品，技术➕销售</p><p><strong>用户大部分技术问题都能代表公司独当一面给出权威解释，是公司技术的代言人，客户信任的专家顾问</strong></p><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><ol><li><p>请介绍一下你对网络安全的理解和认识？</p><p>网络安全是指保护计算机网络和网络资源不受未授权的访问、攻击、盗窃、损害等威胁的技术和实践。它围绕数据的保密性、完整性和可用性展开，旨在确保信息和通信技术系统的安全和稳定运行。网络安全不仅包括防止恶意软件（如病毒、蠕虫、间谍软件）的侵害，还涵盖了数据保护、应用安全、网络服务的安全、以及防止网络攻击（如DDoS攻击、钓鱼、社交工程）等多个方面。</p></li><li><p>你对网络安全产品和技术有一些了解吗？</p><p>网络安全产品和技术广泛而多样，主要可以分为几大类：</p><ul><li><strong>防火墙和入侵检测系统（IDS&#x2F;IPS）</strong>：用于监控和控制网络流量，阻止未授权的访问和潜在的攻击。</li><li><strong>恶意软件防护软件</strong>：包括杀毒软件、反间谍软件等，用于检测、隔离和清除恶意软件。</li><li><strong>加密技术</strong>：用于保护数据的保密性和完整性，包括传输层安全协议（TLS）、安全套接字层（SSL）、以及各种加密算法。</li><li><strong>身份和访问管理（IAM）</strong>：包括密码管理、多因素认证、权限管理等，用于确保只有授权用户才能访问网络资源。</li><li><strong>安全信息和事件管理（SIEM）</strong>：用于实时监视、分析网络安全事件，帮助企业及时发现和响应安全威胁。</li><li><strong>数据泄露防护（DLP）</strong>：用于防止敏感数据的未授权访问和泄露。</li></ul></li><li><p>你对网络安全行业的发展趋势有什么看法？</p><ul><li><p><strong>人工智能与机器学习</strong>：随着人工智能和机器学习技术的发展，网络安全产品正在变得更加智能，能够自动识别和响应新出现的威胁。</p></li><li><p><strong>云安全</strong>：随着越来越多的企业采用云计算，云安全成为了一个重要议题。保护云环境的数据和应用，确保云服务的安全，是当前网络安全的一个重要方向。</p></li><li><p><strong>零信任安全模型</strong>：传统的安全模型基于“信任但验证”的原则，而零信任安全模型认为不应默认信任任何内外网络请求，所有访问都需进行严格验证。</p></li><li><p><strong>法规和合规要求的加强</strong>：随着数据保护法规（如欧盟的GDPR、加州的CCPA）的实施，企业在网络安全上的投入增加，以确保合规性。</p></li><li><p><strong>供应链安全</strong>：软件供应链攻击日益频繁，强调了供应链安全的重要性。企业需要确保他们所依赖的第三方服务和组件的安全性。</p><hr></li></ul></li></ol><p>身为三星级酒店服务的人是很多的因此选择一个大品牌有必要的</p><p>农夫山泉的产业链和供应链更完备能及时供货，本地品牌小品牌供货不稳定资金链不稳定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深圳众云面试&quot;&gt;&lt;a href=&quot;#深圳众云面试&quot; class=&quot;headerlink&quot; title=&quot;深圳众云面试&quot;&gt;&lt;/a&gt;深圳众云面试&lt;/h1&gt;&lt;h2 id=&quot;1-自我介绍&quot;&gt;&lt;a href=&quot;#1-自我介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="-面试" scheme="https://xu-zi-kang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【面试】面试回答流程</title>
    <link href="https://xu-zi-kang.github.io/2024/03/20/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E9%9D%A2%E8%AF%95%E5%9B%9E%E7%AD%94%E6%B5%81%E7%A8%8B/"/>
    <id>https://xu-zi-kang.github.io/2024/03/20/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E9%9D%A2%E8%AF%95%E5%9B%9E%E7%AD%94%E6%B5%81%E7%A8%8B/</id>
    <published>2024-03-20T13:36:51.000Z</published>
    <updated>2024-03-20T13:57:49.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-你还有什么问题想问的吗？"><a href="#1-你还有什么问题想问的吗？" class="headerlink" title="1.你还有什么问题想问的吗？"></a>1.你还有什么问题想问的吗？</h1><p><strong>您觉得我是否符合这个岗位的预期？</strong></p><p><strong>交流的还不错</strong>：</p><ol><li>如果我有幸任职咱们公司，我的岗位具体会负责哪些内容？</li><li>需要跟公司的哪些人哪些部门进行工作的对接？公司现在的发展重心是在哪里？</li><li>未来发展方向的重点会放在哪里？</li><li>能介绍一下公司当前的业务和产品的侧重点吗？</li><li>团队规模？</li></ol><hr><p><strong>交流的不行</strong>：</p><ol><li>您觉得我今天有哪些不足，感觉您也是特别有经验的所以也特别想听听您的建议。</li><li>您觉得我对于这个岗位还有哪些差距？并且您觉得我在这个岗位上都要重点提升哪些方面？</li></ol><h1 id="2-自我介绍的思路"><a href="#2-自我介绍的思路" class="headerlink" title="2.自我介绍的思路"></a>2.自我介绍的思路</h1><p><strong>如果发现自己说的话偏离主题了</strong>：所以针对您刚才提出的问题，我是这样考虑的。</p><p><strong>问</strong>：请简单介绍一下你做的项目。当你拿到一个需求之后都会做些什么？怎么处理？哪些步骤？</p><p><strong>讲故事的方式进行回答</strong>：</p><ol><li>做这个事情的背景&#x2F;大前提是什么？你的动机是什么？需求的来源是什么？</li></ol><p>​是为了追逐市场空间，流量增长，变现能力。</p><ol start="2"><li><p>分析了哪些数据？对比了哪些竞品？他们是怎么做的？实际的业务场景和哪些业务人员是怎么样沟通的？</p><p>做了哪些工作？得出了什么样的结论？最后决定是怎么样去做的？</p></li></ol><p>​制作产品的简单介绍以及简单功能—流程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-你还有什么问题想问的吗？&quot;&gt;&lt;a href=&quot;#1-你还有什么问题想问的吗？&quot; class=&quot;headerlink&quot; title=&quot;1.你还有什么问题想问的吗？&quot;&gt;&lt;/a&gt;1.你还有什么问题想问的吗？&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;您觉得我是否符合这个岗位的预</summary>
      
    
    
    
    
    <category term="-面试" scheme="https://xu-zi-kang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【hexo】评论系统总结</title>
    <link href="https://xu-zi-kang.github.io/2024/03/18/%E3%80%90hexo%E3%80%91%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/"/>
    <id>https://xu-zi-kang.github.io/2024/03/18/%E3%80%90hexo%E3%80%91%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-18T09:13:47.000Z</published>
    <updated>2024-03-18T13:14:02.745Z</updated>
    
    <content type="html"><![CDATA[<hr><p>我的主要参考借鉴了：Twikoo 评论系统<a href="https://nickxu.me/2022/02/19/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89Twikoo-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">相关教程</a></p><p>在搭建的过程中我遇到的一些问题：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Twikoo</span> <span class="comment"># Valine,Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Twikoo</span></span><br><span class="line"><span class="comment"># https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://twikoo.yolus.top/</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-shanghai</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>在填写自己twikoo的<code>envId</code>时，最开始填写的是自己通过vercel绑定的域名<code>twikoo.yolus.top</code>出现问题页面只显示Comment，并没有下面的twikoo的评论系统框。</p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/18/a131e7.png" alt="图片"></p><p>最后发现使用vercel自带的域名是可以解决这个问题，那就说明时我的解析域名遇到了问题，但是在浏览器中却是可以正常访问的</p><p>在最后是因为没有加<code>http://</code>导致无法访问到，O.o????</p><p>最后将<code>envId</code>改为<code>envId: https://twikoo.yolus.top/</code>即可正常访问ovo</p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/18/b50623.png" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;我的主要参考借鉴了：Twikoo 评论系统&lt;a href=&quot;https://nickxu.me/2022/02/19/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%</summary>
      
    
    
    
    
    <category term="-hexo" scheme="https://xu-zi-kang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【hexo】引入Aplayer播放音乐</title>
    <link href="https://xu-zi-kang.github.io/2024/03/16/%E3%80%90hexo%E3%80%91%E5%BC%95%E5%85%A5Aplayer%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90/"/>
    <id>https://xu-zi-kang.github.io/2024/03/16/%E3%80%90hexo%E3%80%91%E5%BC%95%E5%85%A5Aplayer%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90/</id>
    <published>2024-03-15T16:19:25.000Z</published>
    <updated>2024-03-17T07:29:18.239Z</updated>
    
    <content type="html"><![CDATA[<p>Jelly的文章：<a href="https://www.guodongblog.com/posts/91597d56b19f/#%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE">Hexo-Butterfly音乐播放器的添加</a></p><p>Akilarの马卡龙的博客文章： <a href="https://akilar.top/posts/3afa069a/">引入Aplayer播放音乐</a></p><p>Twikoo 评论系统<a href="https://nickxu.me/2022/02/19/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89Twikoo-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">相关教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jelly的文章：&lt;a href=&quot;https://www.guodongblog.com/posts/91597d56b19f/#%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%A</summary>
      
    
    
    
    
    <category term="-hexo" scheme="https://xu-zi-kang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【hexo】hexo指令</title>
    <link href="https://xu-zi-kang.github.io/2024/03/15/%E3%80%90hexo%E3%80%91hexo%E6%8C%87%E4%BB%A4/"/>
    <id>https://xu-zi-kang.github.io/2024/03/15/%E3%80%90hexo%E3%80%91hexo%E6%8C%87%E4%BB%A4/</id>
    <published>2024-03-15T15:36:17.000Z</published>
    <updated>2024-03-16T04:15:50.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-hexo文章的提交"><a href="#一-hexo文章的提交" class="headerlink" title="一.hexo文章的提交"></a>一.hexo文章的提交</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>1.清理网页缓存数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p><strong>2.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p><strong>3.部署到github</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>4.新建一篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n 文章名</span><br></pre></td></tr></table></figure><blockquote><p>这是一段引用</p></blockquote><p><em>斜体</em></p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/be2bab.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world 代码块</span><br></pre></td></tr></table></figure><p>这是一串代码<code>hello world</code>,你好</p><p>Yol的博客：[点击进入](</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-hexo文章的提交&quot;&gt;&lt;a href=&quot;#一-hexo文章的提交&quot; class=&quot;headerlink&quot; title=&quot;一.hexo文章的提交&quot;&gt;&lt;/a&gt;一.hexo文章的提交&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="-hexo" scheme="https://xu-zi-kang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【面试】一知智能</title>
    <link href="https://xu-zi-kang.github.io/2024/03/15/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E4%B8%80%E7%9F%A5%E6%99%BA%E8%83%BD/"/>
    <id>https://xu-zi-kang.github.io/2024/03/15/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E4%B8%80%E7%9F%A5%E6%99%BA%E8%83%BD/</id>
    <published>2024-03-15T14:53:57.000Z</published>
    <updated>2024-03-18T06:49:51.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring的bean的生命周期，spring-boot的生命周期？"><a href="#1-Spring的bean的生命周期，spring-boot的生命周期？" class="headerlink" title="1.Spring的bean的生命周期，spring boot的生命周期？"></a>1.Spring的bean的生命周期，spring boot的生命周期？</h1><p><strong>理解</strong>：</p><p>1.实例化bean，就是先创建一个bean，可以根据xml或者@bean注解创建</p><p>2.属性赋值阶段，将配置的属性或者依赖注入到bean中，可以通过配置文件或者注解的方式进行实现</p><p>3.初始化阶段，可以通过@PostConstuct或者bean的接口来定义初始化方法</p><p>4.使用阶段，Bean可以被使用</p><p>5.销毁阶段，当应用程序或者容器销毁的时候，调用销毁方法</p><hr><p>实例化，属性赋值，初始化，使用，销毁</p><p>在 Spring 框架中，Bean 的生命周期包括以下几个阶段：</p><ol><li>实例化（Instantiation）：在这个阶段，Spring 容器会根据配置信息或注解创建一个 Bean 的实例。可以通过构造函数实例化或使用工厂方法创建 Bean。</li><li>属性赋值（Population）：在实例化之后，Spring 容器会将配置的属性值或依赖注入到 Bean 实例中。这可以通过 XML 配置、注解或自动装配等方式完成。</li><li>初始化（Initialization）：在属性赋值完成后，Spring 容器会调用 Bean 的初始化方法，进行一些自定义的初始化逻辑。可以通过实现 InitializingBean 接口或使用 @PostConstruct 注解来定义初始化方法。</li><li>使用（In Use）：在初始化完成后，Bean 可以被应用程序使用。它可以响应应用程序的请求，提供所需的功能。</li><li>销毁（Destruction）：在应用程序关闭或容器销毁时，Spring 容器会调用 Bean 的销毁方法，执行一些清理操作。可以通过实现 DisposableBean 接口或使用 @PreDestroy 注解来定义销毁方法。</li></ol><h1 id="2-mysql中的索引都有哪些？你用过哪些索引？怎么样能用索引更快的查询？"><a href="#2-mysql中的索引都有哪些？你用过哪些索引？怎么样能用索引更快的查询？" class="headerlink" title="2.mysql中的索引都有哪些？你用过哪些索引？怎么样能用索引更快的查询？"></a>2.mysql中的索引都有哪些？你用过哪些索引？怎么样能用索引更快的查询？</h1><p>答：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 创建主键索引</span><br><span class="line">CREATE INDEX empno_index ON emp(empno)</span><br><span class="line">-- 其中empno_index为索引名称</span><br><span class="line">-- 在emp这张表的empno列创建</span><br><span class="line">-- 只对创建索引的列有效</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>索引的原理（二叉树）：</p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/15/c49483.png" alt="图片"><br>索引的类型：<br>主键索引，主键自动的为主索引(类型Primary key)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table t1 (</span><br><span class="line">id int primary key,-- 主键，同时也是索引，称为主键索引</span><br><span class="line">name varchar(32));</span><br></pre></td></tr></table></figure><p>唯一索引(UNIQUE)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table t2(</span><br><span class="line">id int unique,-- id是唯一的，同时也是索引，称为unique索引</span><br><span class="line">name varchar(32));</span><br><span class="line">-- 一般是在某列的值不会重复的情况下使用，否则使用普通索引（inedx）</span><br></pre></td></tr></table></figure><p>普通索引(INDEX)</p><p>全文索引 (FULLTEXT)[适用于MyISAM]开发中考虑使用: 全文搜索 Solr 和 ElasticSearch (ES)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 删除索引</span><br><span class="line">DROP INDEX id_index ON t25 -- id_index为索引名称,t25为表名</span><br><span class="line">-- 删除主键索引</span><br><span class="line">ALTER TABLE t26 DROP PRIMARY KEY</span><br></pre></td></tr></table></figure><h1 id="3-请说一下线程和进程的区别？对于一个操作系统来说怎么实现线程和进程"><a href="#3-请说一下线程和进程的区别？对于一个操作系统来说怎么实现线程和进程" class="headerlink" title="3.请说一下线程和进程的区别？对于一个操作系统来说怎么实现线程和进程"></a>3.请说一下线程和进程的区别？对于一个操作系统来说怎么实现线程和进程</h1><p>线程是进程内部，</p><h3 id="进程比作工厂"><a href="#进程比作工厂" class="headerlink" title="进程比作工厂"></a>进程比作工厂</h3><p>想象一个进程像是一个工厂。每个工厂（进程）拥有它自己的资源：建筑物（内存空间）、电力供应（CPU时间）、原料（程序代码和数据）等。每个工厂独立运作，生产产品（执行程序）。工厂之间互不干扰，它们各自管理自己的资源。如果一个工厂发生故障（进程崩溃），它不会影响到其他工厂的运作。</p><h3 id="线程比作工人"><a href="#线程比作工人" class="headerlink" title="线程比作工人"></a>线程比作工人</h3><p>在每个工厂内部，有许多工人（线程）在工作。这些工人共享工厂的资源：他们在同一建筑内工作，使用相同的电力供应和原料。但每个工人负责完成特定的任务（执行特定的代码段）。一些工人可能在装配线上工作（执行计算任务），而其他工人可能在包装部门（处理输入&#x2F;输出任务）。</p><p>工人之间可以轻松地互相沟通（线程间通信），因为他们处于同一个工厂内。他们可以直接交谈，交换工具或材料，而不需要通过外部邮递服务（进程间通信需要更复杂的机制）。</p><p>如果一个工人遇到问题（线程崩溃），这可能会影响到同一工厂内的其他工人，因为他们共享同样的工作环境。在最坏的情况下，这可能导致整个工厂停工（进程崩溃）。</p><h3 id="创建和管理"><a href="#创建和管理" class="headerlink" title="创建和管理"></a>创建和管理</h3><p>创建一个新工厂（进程）需要大量的资源和时间，因为你需要建造建筑物，安装设备，招聘员工等。相比之下，雇佣一个新工人（创建一个线程）成本较低，因为工厂的基础设施已经就绪，只需要为新工人提供一些个人工具和工作空间即可。</p><hr><h2 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h2><h3 id="1、继承-Thread-类"><a href="#1、继承-Thread-类" class="headerlink" title="1、继承 Thread 类"></a>1、继承 Thread 类</h3><p>通过继承 Thread 类，并重写它的 run 方法，我们就可以创建一个线程。</p><ul><li>首先定义一个类来继承 Thread 类，重写 run 方法。</li><li>然后创建这个子类对象，并调用 start 方法启动线程。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/18/021b34.png" alt="图片"></p><h3 id="2、实现-Runnable-接口"><a href="#2、实现-Runnable-接口" class="headerlink" title="2、实现 Runnable 接口"></a>2、实现 Runnable 接口</h3><p>通过实现 Runnable ，并实现 run 方法，也可以创建一个线程。</p><ul><li>首先定义一个类实现 Runnable 接口，并实现 run 方法。</li><li>然后创建 Runnable 实现类对象，并把它作为 target 传入 Thread 的构造函数中</li><li>最后调用 start 方法启动线程。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/18/c4b9b0.png" alt="图片"></p><h3 id="3、实现-Callable-接口，并结合-Future-实现"><a href="#3、实现-Callable-接口，并结合-Future-实现" class="headerlink" title="3、实现 Callable 接口，并结合 Future 实现"></a>3、实现 Callable 接口，并结合 Future 实现</h3><ul><li>首先定义一个 Callable 的实现类，并实现 call 方法。call 方法是带返回值的。</li><li>然后通过 FutureTask 的构造方法，把这个 Callable 实现类传进去。</li><li>把 FutureTask 作为 Thread 类的 target ，创建 Thread 线程对象。</li><li>通过 FutureTask 的 get 方法获取线程的执行结果。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/18/f6dfee.png" alt="图片"></p><h3 id="4、通过线程池创建线程"><a href="#4、通过线程池创建线程" class="headerlink" title="4、通过线程池创建线程"></a>4、通过线程池创建线程</h3><p>此处用 JDK 自带的 Executors 来创建线程池对象。</p><ul><li>首先，定一个 Runnable 的实现类，重写 run 方法。</li><li>然后创建一个拥有固定线程数的线程池。</li><li>最后通过 ExecutorService 对象的 execute 方法传入线程对象。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/18/77b066.png" alt="图片"></p><h1 id="4-你用过哪些数据库连接池？数据库的连接池是怎样运作的？"><a href="#4-你用过哪些数据库连接池？数据库的连接池是怎样运作的？" class="headerlink" title="4.你用过哪些数据库连接池？数据库的连接池是怎样运作的？"></a>4.你用过哪些数据库连接池？数据库的连接池是怎样运作的？</h1><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/15/c52aaa.png" alt="图片"></p><p><strong>使用方法</strong>：maven引入druid的外部依赖，然后再yml或者是properties中配置数据库连接即可。可以设置最大连接数量</p><h1 id="5-你是如何使用HashMap的？（HashMap与HashTable-的区别）"><a href="#5-你是如何使用HashMap的？（HashMap与HashTable-的区别）" class="headerlink" title="5.你是如何使用HashMap的？（HashMap与HashTable 的区别）"></a>5.你是如何使用HashMap的？（HashMap与HashTable 的区别）</h1><p><strong>理解</strong>：</p><p>HashMap是线程不安全的，里面有containsVaule,containsKey两个方法，而且HashMap的key只能有一个为空，且key对应的多个vaule为空。</p><p>HashTable的线程是安全的，里面有containsVaule，containsKey，contains三种方法。containsVaule和contains功能相同，<strong>适合在多线程并发的情况下使用</strong></p><hr><p><strong>（1</strong>）线程安全性不同</p><p>HashMap是线程不安全的，HashTable是线程安全的，其中的方法大多数是Synchronize的，在多线程并发的情况下，可以直接使用HashTable，但是使用HashMap时必须自己增加同步处理。</p><p><strong>（2</strong>）是否提供<strong>contains</strong>方法</p><p>HashMap只有containsValue和containsKey方法；HashTable有contains、containsKey和containsValue三个方法，其中contains和containsValue方法功能相同。</p><p><strong>（3</strong>）<strong>key</strong>和<strong>value</strong>是否允许<strong>null</strong>值</p><p>Hashtable中，key和value都不允许出现null值。HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。</p><h1 id="6-事务隔离级别"><a href="#6-事务隔离级别" class="headerlink" title="6.事务隔离级别"></a>6.事务隔离级别</h1><p><a href="https://www.bilibili.com/video/BV1pm4y1b74V">视频说明</a></p><p><strong>脏读</strong>：开启两个事务，事务A读到了事务B还没有提交的数据</p><p><strong>幻读</strong>：事务A的操作是修改了数据表中全部的数据行，与此同时事务B插入了一条新的数据，最后事务A去查看数据表的时候发现有一条数据没被修改，就像产生了幻觉一样</p><p><strong>不可重复读</strong>：在一个事物里面执行了两次select语句，在此期间没有执行DDL语句，但是前后查看的数据结果却不相同</p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/15/3f4e85.png" alt="图片"></p><h1 id="7、-和-equals的区别"><a href="#7、-和-equals的区别" class="headerlink" title="7、 &#x3D;&#x3D; 和 equals的区别"></a>7、 &#x3D;&#x3D; 和 equals的区别</h1><p>&#x3D;&#x3D; 既可以比较基本数据类型,也可以比较引用数据类型,比较基本数据类型,比较的是具体的值,比较引用数据类型比较是地址值。</p><p>equals只能比较引用数据类型,重写之前比较的是引用数据类型的地址值,重写之后,根据重自定义写的规则，比较的是引用数据类型的内容。</p><hr><p><strong>理解</strong>：</p><p>&#x3D;&#x3D;既可以比较基本数据类型也可以比较引用数据类型，基本数据类型比较的是具体的值，引用数据类型比较的是地址值</p><p>equals只能比较引用数据类型，比较的是引用数据类型地址的值，重写后有可以根据规则比较引用数据类型的内容</p><h1 id="8-String-StringBuffer-和-StringBuilder-的区别是什么"><a href="#8-String-StringBuffer-和-StringBuilder-的区别是什么" class="headerlink" title="8.String StringBuffer 和 StringBuilder 的区别是什么"></a>8.String StringBuffer 和 StringBuilder 的区别是什么</h1><p><strong>理解</strong>：</p><p>StringBuffer对方法加了同步锁，或者对调用方法加了同步锁，线程是安全的<br>StringBuilder是没有对方法加同步锁，线程是不安全的<br>大批量数据单线程用StringBuilder<br>大批量数据多线程用StringBuffer</p><hr><p>String、StringBuilder、StringBuffer是不可变的字符串序列,因此该类不可以被继承，也即没有子类。</p><p><strong>相同点</strong>：</p><p><strong>String类</strong>：</p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/16/defdee.png" alt="图片"></p><p><strong>StringBuilder类：</strong></p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/16/9a57c0.png" alt="图片"></p><p><strong>StringBuffer类：</strong></p><p><img src="https://jsd.cdn.zzko.cn/gh/Asakushen/pic/2024/03/16/d903c2.png" alt="图片"></p><p><strong>不同点：</strong></p><p>StringBuilder类中的大多数方法没有加Synchronized关键字修饰。而StringBuffer类中的大多数方法都是加了Synchronized关键字修饰，正因为如此，在多线程操作的时候，StringBuffer会比StringBuilder安全，但是其效率会偏低。</p><h1 id="9-Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？"><a href="#9-Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？" class="headerlink" title="9.Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？"></a>9.Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</h1><p> 启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：<br><strong>@SpringBootConfiguration</strong>：组合了@Configuration 注解，实现配置文件的功能。<br><strong>@EnableAutoConfiguration</strong>：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源 自动配置功能  <strong>@ComponentScan</strong>：Spring组件扫描。</p><h1 id="10-写出Java的四类八种基本数据类"><a href="#10-写出Java的四类八种基本数据类" class="headerlink" title="10.写出Java的四类八种基本数据类"></a>10.写出Java的四类八种基本数据类</h1><p>整数                      byte short int long</p><p>小数(浮点)             float double</p><p>布尔                      boolean</p><p>字符                      char</p><h2 id="11-String-类的常用方法都有那些？"><a href="#11-String-类的常用方法都有那些？" class="headerlink" title="11.String 类的常用方法都有那些？"></a>11.String 类的常用方法都有那些？</h2><p>equals:比较字符串<br>split:分割字符串<br>subString:截取字符串<br>length:返回字符串长度<br>indexOf:返回指定字符的索引<br>charAt:返回指定索引处的字符<br>replace:字符串的替换<br>trim:去除字符串两端的空白<br>getBytes:返回字符串的byte类型数组<br>toLowerCase:将字符串转换成小写字母<br>toUpperCase:将字符串转换成大写字母</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Spring的bean的生命周期，spring-boot的生命周期？&quot;&gt;&lt;a href=&quot;#1-Spring的bean的生命周期，spring-boot的生命周期？&quot; class=&quot;headerlink&quot; title=&quot;1.Spring的bean的生命周期，s</summary>
      
    
    
    
    
    <category term="-面试" scheme="https://xu-zi-kang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【git】如何查找本机ssh秘钥或文件路径及git拉取代码</title>
    <link href="https://xu-zi-kang.github.io/2024/03/11/%E3%80%90git%E3%80%91%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E6%9C%AC%E6%9C%BAssh%E7%A7%98%E9%92%A5%E6%88%96%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E5%8F%8Agit%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81/"/>
    <id>https://xu-zi-kang.github.io/2024/03/11/%E3%80%90git%E3%80%91%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E6%9C%AC%E6%9C%BAssh%E7%A7%98%E9%92%A5%E6%88%96%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E5%8F%8Agit%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81/</id>
    <published>2024-03-11T12:54:02.000Z</published>
    <updated>2024-03-16T04:17:59.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何查找本机ssh秘钥或文件路径"><a href="#如何查找本机ssh秘钥或文件路径" class="headerlink" title="如何查找本机ssh秘钥或文件路径"></a>如何查找本机ssh秘钥或文件路径</h1><p>在安装Git前提下，打开Git Bash Here</p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/11/15f50d.png" alt="图片"></p><p>1、输入 cd ~&#x2F;.ssh 进入到.ssh 文件夹</p><p>2、输入 ls 查看.ssh 文件夹里面的文件，有 id_rsa id_rsa.pub known_hosts ，ssh秘钥就在 id_rsa.pub文件里</p><p>3、输入vim id_rsa.pub编辑id_rsa.pub文件，直接复制ssh秘钥即可</p><p>4、若需要找秘钥文件路径的话，输入pwd，就可以看到路径了</p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/11/217877.png" alt="图片"></p><h1 id="git拉取克隆代码"><a href="#git拉取克隆代码" class="headerlink" title="git拉取克隆代码"></a>git拉取克隆代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//先创建git目录</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">//克隆</span><br><span class="line">git clone http://xxx</span><br><span class="line"></span><br><span class="line">//拉取</span><br><span class="line">git pull http://xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何查找本机ssh秘钥或文件路径&quot;&gt;&lt;a href=&quot;#如何查找本机ssh秘钥或文件路径&quot; class=&quot;headerlink&quot; title=&quot;如何查找本机ssh秘钥或文件路径&quot;&gt;&lt;/a&gt;如何查找本机ssh秘钥或文件路径&lt;/h1&gt;&lt;p&gt;在安装Git前提下，打开Gi</summary>
      
    
    
    
    
    <category term="-git" scheme="https://xu-zi-kang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【面试】天津面试公司问题总结</title>
    <link href="https://xu-zi-kang.github.io/2024/03/09/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E5%A4%A9%E6%B4%A5%E9%9D%A2%E8%AF%95%E5%85%AC%E5%8F%B8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://xu-zi-kang.github.io/2024/03/09/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E5%A4%A9%E6%B4%A5%E9%9D%A2%E8%AF%95%E5%85%AC%E5%8F%B8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-09T15:54:35.000Z</published>
    <updated>2024-03-16T04:36:51.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天津创博实习生面试"><a href="#天津创博实习生面试" class="headerlink" title="天津创博实习生面试"></a>天津创博实习生面试</h1><p>问题：</p><h4 id="1-什么是springboot-里面有什么注解"><a href="#1-什么是springboot-里面有什么注解" class="headerlink" title="1.什么是springboot?里面有什么注解?"></a>1.什么是springboot?里面有什么注解?</h4><p>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下<br>3 个注解：<br>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。<br>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源<br>自动配置功能： @SpringBootApplication(exclude<br>&#x3D; { DataSourceAutoConfiguration.class })。<br>@ComponentScan：Spring组件扫描。</p><p><strong>笔试题：</strong></p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/09/9a98da.png" alt="图片"></p><p>回答：</p><p>1.public是公用的，谁都可以去调用public。</p><h1 id="天津帮联科技实习生面试"><a href="#天津帮联科技实习生面试" class="headerlink" title="天津帮联科技实习生面试"></a>天津帮联科技实习生面试</h1><p><strong>笔试题：</strong><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/10/4542d7.png" alt="图片"></p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/10/b4b3b2.png" alt="图片"></p><h1 id="天津正成科技"><a href="#天津正成科技" class="headerlink" title="天津正成科技"></a>天津正成科技</h1><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/10/9c9dba.png" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;天津创博实习生面试&quot;&gt;&lt;a href=&quot;#天津创博实习生面试&quot; class=&quot;headerlink&quot; title=&quot;天津创博实习生面试&quot;&gt;&lt;/a&gt;天津创博实习生面试&lt;/h1&gt;&lt;p&gt;问题：&lt;/p&gt;
&lt;h4 id=&quot;1-什么是springboot-里面有什么注解&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="-面试" scheme="https://xu-zi-kang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【面试】面试题总结</title>
    <link href="https://xu-zi-kang.github.io/2024/03/03/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://xu-zi-kang.github.io/2024/03/03/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-03T08:09:17.000Z</published>
    <updated>2024-03-16T04:36:35.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JDK和JRE-有什么区别？"><a href="#1-JDK和JRE-有什么区别？" class="headerlink" title="1.JDK和JRE 有什么区别？"></a>1.JDK和JRE 有什么区别？</h2><p>jvm是java虚拟机。JRE有核心类库：java.lang 包。JDK里包含JRE，给java开发人员使用</p><h2 id="2-和equals的区别是什么？"><a href="#2-和equals的区别是什么？" class="headerlink" title="2.&#x3D;&#x3D;和equals的区别是什么？"></a>2.&#x3D;&#x3D;和equals的区别是什么？</h2><p>&#x3D;&#x3D;是判断两个对象的地址是不是相等(基本数据类型&#x3D;&#x3D;比较的是值相等，引用行数据类型&#x3D;&#x3D;比较的是内存地址，即是否来自同一个对象)<br>equals也是判断两个对象是否相等：<br>类没有覆盖equals方法比较的是两个对象是否为同一对象，等价于通过&#x3D;&#x3D;比较两个对象<br>类覆盖方法的话比较的是两对象的内容是否相等（一般是两个对象）<br>String中的equals方法是被重写过了的</p><p>&#x3D;&#x3D; : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同 一个对象。(基本数据类型 &#x3D;&#x3D; 比较的是值，引用数据类型 &#x3D;&#x3D; 比较的是内存地址) equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况： 情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时， 等价于通过“&#x3D;&#x3D;”比较这两个对象。 情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象 的内容相等；若它们的内 容相等，则返回 true (即，认为这两个对象相等)。 举个例子：</p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/36f500.png" alt="image-20230817135932905"><br>说明：<br>String中的equals方法是被重写过的，因为object的equals方法是比较的对象的 内存地址，而 String的equals方法比较的是对象的值。 当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要 创建的值相同的对 象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建 一个String对象。</p><h2 id="3-String-类的常用方法都有那些？"><a href="#3-String-类的常用方法都有那些？" class="headerlink" title="3.String 类的常用方法都有那些？"></a>3.String 类的常用方法都有那些？</h2><p>equals:比较字符串<br>split:分割字符串<br>subString:截取字符串<br>length:返回字符串长度<br>indexOf:返回指定字符的索引<br>charAt:返回指定索引处的字符<br>replace:字符串的替换<br>trim:去除字符串两端的空白<br>getBytes:返回字符串的byte类型数组<br>toLowerCase:将字符串转换成小写字母<br>toUpperCase:将字符串转换成大写字母</p><h2 id="4-接口和抽象类的区别？"><a href="#4-接口和抽象类的区别？" class="headerlink" title="4.接口和抽象类的区别？"></a>4.接口和抽象类的区别？</h2><ul><li>接口默认是public的</li><li>方法在接口中不能实现</li><li>接口不能new实例化，只能声明</li><li>一个类实现接口需要实现接口中所有的方法，而抽象类不一定</li><li>一个类可以实现多个接口，但只能实现一个抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; is sleeping.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>Vehicle</code> 是一个接口，它定义了 <code>start()</code>、<code>stop()</code> 和 <code>getSpeed()</code> 三个方法。接口中的方法默认是抽象的，因此没有具体的实现。</p><p><code>Animal</code> 是一个抽象类，它包含了一个私有的字段 <code>name</code> 和一个构造方法用于初始化该字段。抽象类中可以包含抽象方法和具体方法。在上面的例子中，<code>makeSound()</code> 是一个抽象方法，没有具体的实现，而 <code>sleep()</code> 是一个具体方法，它有一个默认的实现。抽象类可以有字段、构造方法、具体方法和抽象方法的组合。</p><p>接口和抽象类都是用来定义类的结构和行为的，但它们有一些区别。接口只能定义抽象方法和常量，而抽象类可以包含字段和具体方法。一个类可以实现多个接口，但只能继承一个抽象类。接口用于描述类的行为，而抽象类通常用于作为其他具体类的基类，提供一些通用的方法和字段。</p><h2 id="5-Java-中i0-流分为几种？"><a href="#5-Java-中i0-流分为几种？" class="headerlink" title="5.Java 中i0 流分为几种？"></a>5.Java 中i0 流分为几种？</h2><p>按功能来分：输入流 (input）、输出流 (output)。<br>按类型来分：字节流和字符流。<br>字节流和字符流的区别是：字节流按8位传输以字节为单位输入输出数据，宇符流按16位传输以字符为单位输入输出数据。</p><h2 id="6-Java-容器（集合）都有哪些？"><a href="#6-Java-容器（集合）都有哪些？" class="headerlink" title="6.Java 容器（集合）都有哪些？"></a>6.Java 容器（集合）都有哪些？</h2><p>list，set，map。<br>list有序的，可重复，允许有多个null。set是无序的，不可重复，只能有一个null。map只能在key上有一个null，value可以有多个null</p><h2 id="7-HashMap-和Hashtable-有什么区别？"><a href="#7-HashMap-和Hashtable-有什么区别？" class="headerlink" title="7.HashMap 和Hashtable 有什么区别？"></a>7.HashMap 和Hashtable 有什么区别？</h2><ul><li>HashTable是线程同步，HashMap非线程同步</li><li>HashTable不允许&lt;key,value&gt;有空值，HashMap允许&lt;key,value&gt;有空值</li><li>HashTable使用Enumeration，HashMap使用Iterator。</li><li>TreeMap能够把它保存的记录根据键排序，默认是按升序排序。</li><li>HashTable中hash数组的默认大小是11，增加方式的old*2+1，HashMap中hash数组的默认大小 是16，增长方式一定是2的指数倍。</li></ul><h2 id="8-有哪些方式可以遍历一个-Map"><a href="#8-有哪些方式可以遍历一个-Map" class="headerlink" title="8.有哪些方式可以遍历一个 Map?"></a>8.有哪些方式可以遍历一个 Map?</h2><p>keySet，entrySet，迭代器</p><ol><li><p>使用 <code>keySet()</code> 方法遍历键：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;K, V&gt; map = ...; <span class="comment">// 假设为要遍历的 Map</span></span><br><span class="line"><span class="keyword">for</span> (K key : map.keySet()) &#123;</span><br><span class="line">    <span class="comment">// 获取键对应的值</span></span><br><span class="line">    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    <span class="comment">// 处理键值对</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>entrySet()</code> 方法遍历键值对：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;K, V&gt; map = ...; <span class="comment">// 假设为要遍历的 Map</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    <span class="comment">// 处理键值对</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用迭代器遍历键值对：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;K, V&gt; map = ...; <span class="comment">// 假设为要遍历的 Map</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;K, V&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;K, V&gt; entry = iterator.next();</span><br><span class="line">    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    <span class="comment">// 处理键值对</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="9-线程和进程的区别？"><a href="#9-线程和进程的区别？" class="headerlink" title="9.线程和进程的区别？"></a>9.线程和进程的区别？</h2><p>线程是进程内部，</p><p>举个例子，可以将进程比作一个运行的程序，而线程则是程序中的一个执行路径。假设你在电脑上同时打开了多个应用程序，比如浏览器、音乐播放器和文本编辑器。每个应用程序都是一个进程，它们独立运行，并且拥有各自的内存空间和资源。而每个应用程序内部可能会有多个线程，比如浏览器中的渲染线程、网络请求线程和 JavaScript 执行线程等。这些线程共享浏览器进程的内存空间和资源，协同工作来完成各种任务，例如同时下载多个文件、渲染网页内容和响应用户交互等。在这个例子中，每个应用程序是一个进程，而应用程序内部的线程是在进程内部进行调度和执行的。</p><p>当我们试图理解进程和线程的区别时，可以通过比喻来简化这些概念。一个常用的比喻是将进程比作工厂，而线程则比作工厂里的工人。</p><h3 id="进程比作工厂"><a href="#进程比作工厂" class="headerlink" title="进程比作工厂"></a>进程比作工厂</h3><p>想象一个进程像是一个工厂。每个工厂（进程）拥有它自己的资源：建筑物（内存空间）、电力供应（CPU时间）、原料（程序代码和数据）等。每个工厂独立运作，生产产品（执行程序）。工厂之间互不干扰，它们各自管理自己的资源。如果一个工厂发生故障（进程崩溃），它不会影响到其他工厂的运作。</p><h3 id="线程比作工人"><a href="#线程比作工人" class="headerlink" title="线程比作工人"></a>线程比作工人</h3><p>在每个工厂内部，有许多工人（线程）在工作。这些工人共享工厂的资源：他们在同一建筑内工作，使用相同的电力供应和原料。但每个工人负责完成特定的任务（执行特定的代码段）。一些工人可能在装配线上工作（执行计算任务），而其他工人可能在包装部门（处理输入&#x2F;输出任务）。</p><p>工人之间可以轻松地互相沟通（线程间通信），因为他们处于同一个工厂内。他们可以直接交谈，交换工具或材料，而不需要通过外部邮递服务（进程间通信需要更复杂的机制）。</p><p>如果一个工人遇到问题（线程崩溃），这可能会影响到同一工厂内的其他工人，因为他们共享同样的工作环境。在最坏的情况下，这可能导致整个工厂停工（进程崩溃）。</p><h3 id="创建和管理"><a href="#创建和管理" class="headerlink" title="创建和管理"></a>创建和管理</h3><p>创建一个新工厂（进程）需要大量的资源和时间，因为你需要建造建筑物，安装设备，招聘员工等。相比之下，雇佣一个新工人（创建一个线程）成本较低，因为工厂的基础设施已经就绪，只需要为新工人提供一些个人工具和工作空间即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过将进程比作工厂，线程比作工人，我们可以更容易地理解它们之间的关系和区别。进程是资源分配和执行的独立单位，拥有自己的地址空间和资源。线程是进程内部的执行单位，共享进程的资源，但是能独立执行任务，提高工作效率。</p><h2 id="10-守护线程是什么？"><a href="#10-守护线程是什么？" class="headerlink" title="10.守护线程是什么？"></a>10.守护线程是什么？</h2><p>在 Java 中，守护线程（Daemon Thread）是一种特殊类型的线程，它是为其他线程提供服务的线程。与普通线程（用户线程）相比，守护线程具有以下特点：</p><ol><li>生命周期依赖：守护线程的生命周期依赖于其他非守护线程。当所有非守护线程都结束时，虚拟机会自动退出，不会等待守护线程执行完毕。</li><li>后台执行：守护线程在后台默默地执行任务，不会阻止程序的终止。当所有非守护线程结束后，守护线程会被自动终止。</li><li>资源释放：守护线程主要用于执行一些后台任务，如垃圾回收、自动保存等。它们通常不处理关键业务逻辑，因此在程序终止时，不需要手动释放守护线程所占用的资源。</li></ol><p>在 Java 中，可以通过 <code>setDaemon(true)</code> 方法将线程设置为守护线程。默认情况下，线程是非守护线程。</p><p>下面是一个简单的示例，演示了守护线程的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThreadExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Daemon thread is running.&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>); <span class="comment">// 将线程设置为守护线程</span></span><br><span class="line"></span><br><span class="line">        daemonThread.start(); <span class="comment">// 启动守护线程</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Main thread ends.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，创建了一个守护线程，它会每隔一秒输出一条信息。主线程启动守护线程后，立即结束，而守护线程会在后台一直运行，直到程序终止。</p><h2 id="11-创建线程有哪几种方式？"><a href="#11-创建线程有哪几种方式？" class="headerlink" title="11.创建线程有哪几种方式？"></a>11.创建线程有哪几种方式？</h2><h2 id="12-什么是反射？"><a href="#12-什么是反射？" class="headerlink" title="12.什么是反射？"></a>12.什么是反射？</h2><p><strong>什么是反射机制？</strong><br>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个 对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 java语言的反射机制。<br>静态编译和动态编译<br><strong>静态编译</strong>：在编译时确定类型，绑定对象<br><strong>动态编译</strong>：运行时确定类型，绑定对象<br><strong>反射机制优缺点</strong><br><strong>优点</strong>： 运行期类型的判断，动态加载类，提高代码灵活度。<br><strong>缺点</strong>： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能 比直接的java代码要慢很多。<br><strong>反射机制的应用场景有哪些？</strong><br>反射是框架设计的灵魂。<br>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实 际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。<br>举例：①我们在使用JDBC连接数据库时使用Class.forName()通过反射加载数据库的驱动程序；<br>②Spring框架也用到很多反射机制， 经典的就是xml的配置模式。Spring 通过 XML 配置模式装载 Bean 的过程：</p><p>1)将程序内所有 XML 或 Properties 配置文件加载入内存中;<br>2)Java类里面解析xml或 properties里面的内容，得到对应实体类的字节码字符串以及相关的属性信息;<br>3)使用反射机制，根据这 个字符串获得某个类的Class实例;<br>4)动态配置实例的属性</p><p><strong>Java获取反射的三种方法</strong><br>1.通过new对象实现反射机制 2.通过路径实现反射机制 3.通过类名实现反射机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> score;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Get</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取反射机制三种方式</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//方式一(通过建立对象)</span></span><br><span class="line"></span><br><span class="line"> <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"> <span class="type">Class</span> <span class="variable">classobj1</span> <span class="operator">=</span> stu.getClass();</span><br><span class="line"></span><br><span class="line"> System.out.println(classobj1.getName());</span><br><span class="line"></span><br><span class="line"> <span class="comment">//方式二（所在通过路径-相对路径）</span></span><br><span class="line"></span><br><span class="line"> <span class="type">Class</span> <span class="variable">classobj2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;fanshe.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"> System.out.println(classobj2.getName());</span><br><span class="line"></span><br><span class="line"> <span class="comment">//方式三（通过类名）</span></span><br><span class="line"></span><br><span class="line"> <span class="type">Class</span> <span class="variable">classobj3</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line"> System.out.println(classobj3.getName());</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="13-什么是Java-序列化？什么情况下需要序列化？"><a href="#13-什么是Java-序列化？什么情况下需要序列化？" class="headerlink" title="13.什么是Java 序列化？什么情况下需要序列化？"></a>13.什么是Java 序列化？什么情况下需要序列化？</h2><h2 id="14-如何实现对象克隆？"><a href="#14-如何实现对象克隆？" class="headerlink" title="14.如何实现对象克隆？"></a>14.如何实现对象克隆？</h2><h2 id="15-深拷贝和浅拷贝区别是什么？"><a href="#15-深拷贝和浅拷贝区别是什么？" class="headerlink" title="15.深拷贝和浅拷贝区别是什么？"></a>15.深拷贝和浅拷贝区别是什么？</h2><p>浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址， 深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加 的指针指向这个新的内 存， 使用深拷贝的情况下，释放内存的时候不会因为出现浅拷贝时释放同一个内存的 错误。 浅复制：仅仅是指向被复制的内存地址，如果原地址发生改变，那么浅复制出来 的对象也会相应的改变。 深复制：在计算机中开辟一块新的内存地址用于存放复制的对象。</p><h2 id="16-session-和-cookie-有什么区别？"><a href="#16-session-和-cookie-有什么区别？" class="headerlink" title="16.session 和 cookie 有什么区别？"></a>16.session 和 cookie 有什么区别？</h2><ul><li>存储位置：session是存放在服务器端的，cookie是存放在浏览器里<ul><li>安全性：cookie可以被用户随意篡改，是不安全的。session将数据存放在数据库或者内存中，用户无法直接访问修改，是更加安全的<ul><li>跨域支持：cookie支持跨域访问，多个域名之间共享数据。而session通常与单个域名相关，不支持跨域<ul><li>生命周期：cookie的生命周期可以设置过期时间，在浏览器关闭后可以不销毁。而session的生命周期一般是伴随着浏览器的关闭或者超过一定时间不用了就会自动销毁。<ul><li>存储位置：cookie是存在浏览器的cookie文件中。而session是存在内存或者数据库中<ul><li>存储容量：cookie的存储容量是比较小的，session容量可以更大<ul><li>性能开销：session存储在服务器中，它是一个用户对应一个session，随着用户的数量增加，对服务器的负载也会变大。cookie存储在客户端中，对服务器的负载小</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="17-get-和post-请求有哪些区别？"><a href="#17-get-和post-请求有哪些区别？" class="headerlink" title="17.get 和post 请求有哪些区别？"></a>17.get 和post 请求有哪些区别？</h2><p>GET和POST是HTTP协议中两种常用的请求方法，它们有以下区别：</p><ol><li>数据传输方式：<ul><li>GET请求：通过URL参数传递数据，数据附加在URL的查询字符串中，可以在浏览器地址栏中看到。GET请求的数据传输是明文的，不适合传输敏感信息。</li><li>POST请求：通过请求体传递数据，数据不会显示在URL中，对传输的数据进行了加密处理，更适合传输敏感信息。</li></ul></li><li>数据长度限制：<ul><li>GET请求：由于数据附加在URL中，URL长度有限制，不同浏览器和服务器对URL长度的限制不同，通常在2048个字符左右。</li><li>POST请求：没有长度限制，可以传输大量数据。</li></ul></li><li>安全性：<ul><li>GET请求：数据在URL中可见，容易被截获和篡改，不适合传输敏感信息。</li><li>POST请求：数据在请求体中，不会显示在URL中，相对于GET请求更安全。</li></ul></li><li>幂等性：<ul><li>GET请求：对服务器的资源操作是幂等的，即多次请求同一个URL返回的结果是相同的，不会对服务器产生副作用。</li><li>POST请求：对服务器的资源操作可能是非幂等的，多次请求同一个URL可能会产生不同的结果，可能对服务器产生副作用。</li></ul></li><li>缓存：<ul><li>GET请求：可以被浏览器缓存，当再次请求相同URL时，浏览器可以直接从缓存中获取响应结果。</li><li>POST请求：不会被浏览器缓存，每次请求都会向服务器发送请求。</li></ul></li><li>使用场景：<ul><li><strong>GET请求：适合获取资源、查询数据，对于幂等操作和不涉及敏感信息的请求。</strong></li><li><strong>POST请求：适合提交数据、修改资源，对于非幂等操作和涉及敏感信息的请求。</strong></li></ul></li></ol><p>需要根据具体的需求和场景选择合适的请求方法，合理使用GET和POST可以提高系统的性能和安全性。</p><p><strong>假设你在一家餐厅（服务器）点餐（发送请求）。你可以通过两种方式提交你的订单（数据）：</strong></p><ol><li><strong>GET请求比喻</strong>：通过大声告诉服务员（URL）你想要的食物，例如：“我想要一个汉堡和一份薯条。” 这种方式类似于GET请求，因为你的订单（数据）对周围的人来说是可见的，容易被人听到（数据通过URL传递，容易被拦截）。此外，如果你的订单非常长，你可能会因为太多信息而让服务员（服务器）难以记住，或者服务员根本听不过来（URL长度限制）。</li><li><strong>POST请求比喻</strong>：你写下你的订单（数据）在一张纸上，然后递给服务员（HTTP消息体）。这样，你的订单对其他客人来说是不可见的（数据不在URL中，更安全）。同时，你可以在纸上写下尽可能多的特殊要求，因为纸张容纳的信息量远大于你能大声说出的（没有数据大小限制）。</li></ol><h2 id="18-如何避免-SQL注入？"><a href="#18-如何避免-SQL注入？" class="headerlink" title="18.如何避免 SQL注入？"></a>18.如何避免 SQL注入？</h2><h2 id="19-try-catch-finally-中哪个部分可以省略？"><a href="#19-try-catch-finally-中哪个部分可以省略？" class="headerlink" title="19.try-catch-finally 中哪个部分可以省略？"></a>19.try-catch-finally 中哪个部分可以省略？</h2><p>catch可以省略</p><p>原因 :<br>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处 理，编译是通不过的，因为编译器硬性规定，普通 异常如果选择捕获，则必须用 catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定， 所以 catch可以省略，你加上catch编译器也觉得无可厚非。 理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对 所有代码加上try，代码 在运行期时也只不过是在正常运行的基础上加一层皮。 但是你一旦对一段代码加上try，就等于显示地承 诺编译器，对这段代码可能抛 出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须 用 catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾 处理，或者加上catch 捕获以便进一步处理。 至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p><hr><h1 id="第一家：与工厂对接的、20人左右、转正后薪资-4-5k-5k"><a href="#第一家：与工厂对接的、20人左右、转正后薪资-4-5k-5k" class="headerlink" title="第一家：与工厂对接的、20人左右、转正后薪资 4.5k-5k"></a>第一家：与工厂对接的、20人左右、转正后薪资 4.5k-5k</h1><p>问了以下问题：</p><h2 id="1-Spring-与-Spring-Boot-的区別"><a href="#1-Spring-与-Spring-Boot-的区別" class="headerlink" title="1.Spring 与 Spring Boot 的区別"></a>1.Spring 与 Spring Boot 的区別</h2><p>Spring和Spring Boot是两个相关的框架，它们有以下区别：</p><ol><li>复杂性：Spring是一个全功能的企业级开发框架，提供了广泛的功能和组件，如依赖注入、AOP、事务管理、MVC框架等。Spring框架需要进行显式的配置和集成，因此在配置和启动上可能需要更多的工作。而Spring Boot是建立在Spring框架之上的工具，旨在简化Spring应用程序的初始化和开发过程。Spring Boot通过自动配置和约定优于配置的原则，大大减少了开发人员的配置工作，使得快速构建和部署应用变得更加容易。</li><li>配置方式：在Spring中，开发人员需要显式地进行配置，通常使用XML配置文件或Java注解来定义和管理Bean、依赖关系、事务等。而Spring Boot采用了约定优于配置的原则，通过自动配置和默认值，减少了大部分的配置工作。Spring Boot使用基于Java的配置（如注解配置）和属性文件来管理应用程序的配置。</li><li>依赖管理：Spring框架的依赖管理相对灵活，开发人员可以根据需要选择和配置所需的库和组件。而Spring Boot通过提供一组预定义的“Starter”依赖简化了依赖管理。这些Starter依赖包含了常用的库和组件，可以根据应用程序的需求进行选择和引入。</li><li>内嵌服务器：Spring Boot内置了一个嵌入式的Servlet容器（如Tomcat、Jetty等），可以方便地将应用程序打包为可执行的JAR文件，并直接运行。这样可以简化部署过程，不再需要独立安装和配置外部的Servlet容器。</li></ol><p>总的来说，Spring Boot是建立在Spring框架之上的工具，旨在简化Spring应用程序的初始化、配置和部署过程。它通过自动配置、约定优于配置的原则、依赖管理和内嵌服务器等特性，提供了更简单、更快速的开发体验。Spring框架则提供了更多的灵活性和自定义能力，适用于更复杂和定制化的企业级应用开发。</p><p><strong>Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</strong><br> 启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：<br> <strong>@SpringBootConfiguration</strong>：组合了@Configuration 注解，实现配置文件的功能。<br> <strong>@EnableAutoConfiguration</strong>：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源 自动配置功能：  @SpringBootApplication(exclude &#x3D; { DataSourceAutoConfiguration.class })。 </p><p><strong>@ComponentScan</strong>：Spring组件扫描。</p><h2 id="2-Spring-Bean-的生命周期"><a href="#2-Spring-Bean-的生命周期" class="headerlink" title="2.Spring Bean 的生命周期"></a>2.Spring Bean 的生命周期</h2><p>实例化，属性赋值，初始化，使用，销毁</p><p>在 Spring 框架中，Bean 的生命周期包括以下几个阶段：</p><ol><li>实例化（Instantiation）：在这个阶段，Spring 容器会根据配置信息或注解创建一个 Bean 的实例。可以通过构造函数实例化或使用工厂方法创建 Bean。</li><li>属性赋值（Population）：在实例化之后，Spring 容器会将配置的属性值或依赖注入到 Bean 实例中。这可以通过 XML 配置、注解或自动装配等方式完成。</li><li>初始化（Initialization）：在属性赋值完成后，Spring 容器会调用 Bean 的初始化方法，进行一些自定义的初始化逻辑。可以通过实现 InitializingBean 接口或使用 @PostConstruct 注解来定义初始化方法。</li><li>使用（In Use）：在初始化完成后，Bean 可以被应用程序使用。它可以响应应用程序的请求，提供所需的功能。</li><li>销毁（Destruction）：在应用程序关闭或容器销毁时，Spring 容器会调用 Bean 的销毁方法，执行一些清理操作。可以通过实现 DisposableBean 接口或使用 @PreDestroy 注解来定义销毁方法。</li></ol><p>需要注意的是，Bean 的生命周期可以通过配置或注解进行控制，例如使用 XML 配置的 init-method 和 destroy-method 属性，或使用 @PostConstruct 和 @PreDestroy 注解。</p><p>另外，Spring 还提供了 BeanPostProcessor 接口，它允许在 Bean 的初始化前后进行一些自定义的处理。通过实现 BeanPostProcessor 接口，可以在 Bean 的初始化前后对 Bean 进行修改或增强。</p><p>总结起来，Spring Bean 的生命周期包括实例化、属性赋值、初始化、使用和销毁这几个阶段。通过配置或注解，可以控制 Bean 在每个阶段的行为，并在需要时执行自定义的初始化和销毁逻辑。</p><p>实例化，属性赋值，初始化对象，使用，销毁</p><h2 id="3-Spring-MVC-的执行流程"><a href="#3-Spring-MVC-的执行流程" class="headerlink" title="3.Spring MVC 的执行流程"></a>3.Spring MVC 的执行流程</h2><p>Spring MVC 是一种基于 Spring 框架的 Web 应用程序开发框架，它通过 MVC（Model-View-Controller）的设计模式来组织和处理请求。下面是 Spring MVC 的执行流程：</p><ol><li>客户端发送请求：客户端（如浏览器）发送一个 HTTP 请求到服务器。</li><li>DispatcherServlet 接收请求：DispatcherServlet 是 Spring MVC 的核心控制器，它拦截所有的请求，并作为前端控制器来处理请求。DispatcherServlet 接收到请求后，根据配置的 URL 映射规则将请求分发给相应的处理器。</li><li>处理器映射器（Handler Mapping）进行映射：处理器映射器根据配置的 URL 映射规则，将请求映射到一个具体的处理器（Controller）。</li><li>处理器执行请求：处理器（Controller）是一个用于处理请求的组件，它根据业务逻辑处理请求，并生成一个 ModelAndView 对象，包含处理结果和视图信息。</li><li>处理器适配器（Handler Adapter）执行处理器：处理器适配器负责执行处理器，并将处理结果封装成 ModelAndView 对象。</li><li>视图解析器（View Resolver）解析视图：视图解析器根据 ModelAndView 中的视图名称解析出真正的视图对象（View），可以是 JSP、Thymeleaf、Freemarker 等。</li><li>视图渲染：视图对象负责将模型数据渲染成最终的响应结果，可以是 HTML 页面、JSON 数据等。</li><li>响应结果返回给客户端：DispatcherServlet 将渲染后的响应结果返回给客户端，完成请求处理过程。</li></ol><p>在整个流程中，Spring MVC 提供了一系列的组件来处理请求，包括 DispatcherServlet、处理器映射器、处理器适配器、视图解析器等。通过配置和扩展这些组件，可以实现灵活的请求处理和视图渲染。同时，Spring MVC 还提供了拦截器、数据绑定、表单验证等功能，以支持更复杂的 Web 应用程序开发。</p><h2 id="4-MySQL-的内外连接"><a href="#4-MySQL-的内外连接" class="headerlink" title="4.MySQL 的内外连接"></a>4.MySQL 的内外连接</h2><p>在 MySQL 中，内连接（INNER JOIN）和外连接（LEFT JOIN、RIGHT JOIN、FULL JOIN）是用于连接多个表的操作。</p><ol><li>内连接（INNER JOIN）：内连接返回两个表中匹配的行。只有当连接条件满足时，才会返回结果。语法如下：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件;</span><br></pre></td></tr></table></figure><ol><li>左外连接（LEFT JOIN）：左外连接返回左表中的所有行，以及右表中满足连接条件的行。如果右表中没有匹配的行，则以 NULL 值填充。语法如下：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件;</span><br></pre></td></tr></table></figure><ol><li>右外连接（RIGHT JOIN）：右外连接返回右表中的所有行，以及左表中满足连接条件的行。如果左表中没有匹配的行，则以 NULL 值填充。语法如下：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件;</span><br></pre></td></tr></table></figure><ol><li>全外连接（FULL JOIN）：全外连接返回左表和右表中的所有行，如果左表或右表中没有匹配的行，则以 NULL 值填充。语法如下：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件;</span><br></pre></td></tr></table></figure><p>在连接条件中，可以使用比较运算符（如 &#x3D;、&lt;、&gt;）或其他逻辑运算符（如 AND、OR）来指定连接条件。</p><p>这些连接操作可以帮助在多个表之间建立关联，并根据连接条件返回合适的结果集。根据业务需求和数据关系，选择适当的连接类型来获取所需的数据。</p><h2 id="5-Redis-是如何使用的，有哪些基本数据类型"><a href="#5-Redis-是如何使用的，有哪些基本数据类型" class="headerlink" title="5.Redis 是如何使用的，有哪些基本数据类型"></a>5.Redis 是如何使用的，有哪些基本数据类型</h2><p>Redis 是一个开源的高性能键值存储系统，常用于缓存、消息队列、实时统计等场景。它支持多种数据结构和数据类型，包括以下基本数据类型：</p><ol><li>字符串（String）：字符串是 Redis 最基本的数据类型，可以存储任意类型的数据，如文本、数字等。字符串类型支持丰富的操作，如设置值、获取值、追加、计数器操作等。</li><li>列表（List）：列表是一个有序的字符串集合，可以在列表的两端进行元素的插入和删除操作。列表类型支持根据索引获取元素、获取列表长度、修剪列表等操作，还提供了一些特殊的操作，如弹出元素、阻塞式弹出等。</li><li>哈希（Hash）：哈希是一个键值对的集合，类似于关联数组。哈希类型适用于存储对象，每个对象可以包含多个字段和对应的值。哈希类型支持设置字段值、获取字段值、获取所有字段和值等操作。</li><li>集合（Set）：集合是一个无序的字符串集合，不允许重复的元素。集合类型支持添加元素、删除元素、判断元素是否存在、计算交集、并集、差集等操作。</li><li>有序集合（Sorted Set）：有序集合是一个有序的字符串集合，每个元素都关联一个分数，用于排序。有序集合类型支持添加元素、删除元素、根据分数范围获取元素、根据分数排序等操作。</li></ol><p>除了以上基本数据类型，Redis 还提供了一些其他的数据结构和数据类型，如位图（Bitmap）、超级日志（HyperLogLog）、地理位置（Geospatial）等，以满足不同场景下的需求。</p><h2 id="6-Nginx-做什么用的"><a href="#6-Nginx-做什么用的" class="headerlink" title="6.Nginx 做什么用的"></a>6.Nginx 做什么用的</h2><h2 id="7-Docker-怎么构建镜像的，怎么push-到仓库"><a href="#7-Docker-怎么构建镜像的，怎么push-到仓库" class="headerlink" title="7.Docker 怎么构建镜像的，怎么push 到仓库"></a>7.Docker 怎么构建镜像的，怎么push 到仓库</h2><ol start="2"><li>你是怎么引入配置的<br> 总结：没有问八股文类 java 基础的问题，视频面试的，面完直接让我去公司谈谈</li></ol><h1 id="第二家：物流仓促（个人觉得也做外包-、全栈、转正后薪资-4k-4-5k"><a href="#第二家：物流仓促（个人觉得也做外包-、全栈、转正后薪资-4k-4-5k" class="headerlink" title="第二家：物流仓促（个人觉得也做外包)、全栈、转正后薪资 4k-4.5k"></a>第二家：物流仓促（个人觉得也做外包)、全栈、转正后薪资 4k-4.5k</h1><p>问了以下问题：</p><h2 id="1-java-中八种数据类型，假如有一个类中有属性为身高，那么使用那种数据类型？"><a href="#1-java-中八种数据类型，假如有一个类中有属性为身高，那么使用那种数据类型？" class="headerlink" title="1.java 中八种数据类型，假如有一个类中有属性为身高，那么使用那种数据类型？"></a>1.java 中八种数据类型，假如有一个类中有属性为身高，那么使用那种数据类型？</h2><p>int,short,long,byte<br>float,double<br>char<br>boolean</p><h2 id="2-有哪几种集合容器，有什么区别，list-和-set-的区别。你怎么看到list-中的有序？"><a href="#2-有哪几种集合容器，有什么区别，list-和-set-的区别。你怎么看到list-中的有序？" class="headerlink" title="2.有哪几种集合容器，有什么区别，list 和 set 的区别。你怎么看到list 中的有序？"></a>2.有哪几种集合容器，有什么区别，list 和 set 的区别。你怎么看到list 中的有序？</h2><p>list,set,map</p><ul><li>list是有序的，允许重复元素，可以插入多个null。</li><li>set是无序的，set不可以重复元素，只允许一个null</li><li>map不是collection的子接口，map可以有任意个null值，但是只允许有一个null键,key不能重复，value可以重复</li></ul><h2 id="3-前端-form-表単怎么提交数据的"><a href="#3-前端-form-表単怎么提交数据的" class="headerlink" title="3.前端 form 表単怎么提交数据的"></a>3.前端 form 表単怎么提交数据的</h2><h2 id="4-Form-传参数怎么传，id-还是-name，后端怎么接收"><a href="#4-Form-传参数怎么传，id-还是-name，后端怎么接收" class="headerlink" title="4.Form 传参数怎么传，id 还是 name，后端怎么接收"></a>4.Form 传参数怎么传，id 还是 name，后端怎么接收</h2><h2 id="5-String-类型的日期，怎么在前段显示为日期（这个我没懂没回答出来）"><a href="#5-String-类型的日期，怎么在前段显示为日期（这个我没懂没回答出来）" class="headerlink" title="5.String 类型的日期，怎么在前段显示为日期（这个我没懂没回答出来）"></a>5.String 类型的日期，怎么在前段显示为日期（这个我没懂没回答出来）</h2><h2 id="6-Mysql的语句考察（语句挺简单的，好久没写我给忘了，没答出来）"><a href="#6-Mysql的语句考察（语句挺简单的，好久没写我给忘了，没答出来）" class="headerlink" title="6.Mysql的语句考察（语句挺简单的，好久没写我给忘了，没答出来）"></a>6.Mysql的语句考察（语句挺简单的，好久没写我给忘了，没答出来）</h2><h2 id="7-前段用的什么东西？"><a href="#7-前段用的什么东西？" class="headerlink" title="7.前段用的什么东西？"></a>7.前段用的什么东西？</h2><h2 id="8-你对框架有什么看法？"><a href="#8-你对框架有什么看法？" class="headerlink" title="8.你对框架有什么看法？"></a>8.你对框架有什么看法？</h2><p>总结：基础问的多，主要在试探会不会开发</p><h1 id="第三家：外包、纯后端、转正后薪资-4-5-5k"><a href="#第三家：外包、纯后端、转正后薪资-4-5-5k" class="headerlink" title="第三家：外包、纯后端、转正后薪资 4.5-5k"></a>第三家：外包、纯后端、转正后薪资 4.5-5k</h1><p>有做题目，String、集合的关系图、有哪些运行中异常、算法、sql语句问了以下问题：</p><h2 id="你对上一个面试者有什么看法？"><a href="#你对上一个面试者有什么看法？" class="headerlink" title="你对上一个面试者有什么看法？"></a>你对上一个面试者有什么看法？</h2><h2 id="Nginx-做什么用的？配置在那个文件，怎么配置的？"><a href="#Nginx-做什么用的？配置在那个文件，怎么配置的？" class="headerlink" title="Nginx 做什么用的？配置在那个文件，怎么配置的？"></a>Nginx 做什么用的？配置在那个文件，怎么配置的？</h2><h2 id="Docker-命令有哪些？"><a href="#Docker-命令有哪些？" class="headerlink" title="Docker 命令有哪些？"></a>Docker 命令有哪些？</h2><h2 id="RabbitMQ、FastDFS、Elasticsearch-是做什么的？"><a href="#RabbitMQ、FastDFS、Elasticsearch-是做什么的？" class="headerlink" title="RabbitMQ、FastDFS、Elasticsearch 是做什么的？"></a>RabbitMQ、FastDFS、Elasticsearch 是做什么的？</h2><h2 id="Git-会不会？"><a href="#Git-会不会？" class="headerlink" title="Git 会不会？"></a>Git 会不会？</h2><h2 id="controller-中都有什么注解"><a href="#controller-中都有什么注解" class="headerlink" title="controller 中都有什么注解"></a>controller 中都有什么注解</h2><p>@RestController,@Controller,@RequestMapping,@PostMapping,@RequestParam,@RequestBody,@PathVariable</p><p>在Spring框架中，尤其是在开发Spring MVC应用时，Controller层使用了多种注解来简化Web应用的开发。这些注解提供了定义请求路由、请求数据处理、响应数据封装等功能。以下是一些常见的与Controller相关的注解：</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><ul><li><strong>@Controller</strong>：标识一个类为Spring MVC Controller处理器。Spring框架的控制反转（IoC）容器会自动检测使用了此注解的类，并将它们注册为Controller Bean。</li></ul><h3 id="请求映射注解"><a href="#请求映射注解" class="headerlink" title="请求映射注解"></a>请求映射注解</h3><ul><li><strong>@RequestMapping</strong>：用于映射Web请求到具体的处理函数。它可以声明在类或方法上，用于设置请求的URL、HTTP方法等信息。</li><li><strong>@GetMapping</strong>：是@RequestMapping的一个简化版，专门用于处理GET类型的请求。</li><li><strong>@PostMapping</strong>：用于处理POST类型的请求，也是@RequestMapping的简化版。</li><li><strong>@PutMapping</strong>、**@DeleteMapping<strong>、</strong>@PatchMapping**：分别用于处理PUT、DELETE、PATCH类型的HTTP请求。</li></ul><h3 id="请求数据处理注解"><a href="#请求数据处理注解" class="headerlink" title="请求数据处理注解"></a>请求数据处理注解</h3><ul><li><strong>@RequestParam</strong>：用于将请求参数绑定到控制器的方法参数上。</li><li><strong>@PathVariable</strong>：用于将URL中的模板变量绑定到控制器的方法参数上。</li><li><strong>@RequestBody</strong>：用于将HTTP请求的body部分绑定到一个对象上，通常用于处理POST请求的内容。</li><li><strong>@RequestHeader</strong>：用于将请求头信息绑定到控制器的方法参数上。</li></ul><h3 id="响应数据处理注解"><a href="#响应数据处理注解" class="headerlink" title="响应数据处理注解"></a>响应数据处理注解</h3><ul><li><strong>@ResponseBody</strong>：指示方法的返回值应该被直接在响应体中返回，而不是解释为视图名。</li><li><strong>@ResponseStatus</strong>：用于指定方法完成后应该返回的HTTP状态码。</li><li><strong>@RestController</strong>：是@Controller和@ResponseBody的组合注解，用于简化创建RESTful服务的Controller。使用@RestController，所有方法默认都会使用@ResponseBody。</li></ul><h3 id="其他有用的注解"><a href="#其他有用的注解" class="headerlink" title="其他有用的注解"></a>其他有用的注解</h3><ul><li><strong>@ModelAttribute</strong>：用于将方法参数或方法返回值绑定到指定的模型属性上，通常用于表单数据的提交处理。</li><li><strong>@SessionAttributes</strong>：用于在会话中存储模型属性，通常用于跨请求之间共享模型属性。</li><li><strong>@RequestMapping</strong>的变体（如@GetMapping, @PostMapping等）提供了一种便捷的方式来处理特定类型的请求。</li></ul><p>总结：基础和框架都有，很实在</p><h1 id="第四家：不清楚"><a href="#第四家：不清楚" class="headerlink" title="第四家：不清楚"></a>第四家：不清楚</h1><p>有做题目，八股文，抽象类和普通类的区别什么的<br>问了以下问题：</p><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><h2 id="1-Spring-的文件上传怎么实现的？"><a href="#1-Spring-的文件上传怎么实现的？" class="headerlink" title="1.Spring 的文件上传怎么实现的？"></a>1.Spring 的文件上传怎么实现的？</h2><p>在Spring框架中，文件上传可以通过多种方式实现，其中最常用的方法是使用Spring的MultipartResolver接口和MultipartFile类。</p><p>以下是文件上传的基本步骤：</p><ol><li>配置MultipartResolver：在Spring配置文件中配置MultipartResolver，用于处理文件上传请求。可以选择使用Spring提供的CommonsMultipartResolver或StandardServletMultipartResolver，具体根据项目所使用的Servlet容器来选择。</li><li>创建文件上传表单：在前端页面中创建一个包含文件上传字段的表单。确保表单的enctype属性设置为”multipart&#x2F;form-data”，以支持文件上传。</li><li>处理文件上传请求：在控制器中处理文件上传请求。可以通过在方法参数中添加MultipartFile类型的参数来接收上传的文件。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="comment">// 文件上传处理逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;upload-success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>处理上传文件：在处理文件上传的方法中，可以使用MultipartFile对象的方法来获取文件的相关信息和内容。例如，可以使用<code>file.getOriginalFilename()</code>获取原始文件名，使用<code>file.getSize()</code>获取文件大小，使用<code>file.getInputStream()</code>获取文件内容的输入流等。</li><li>保存上传文件：根据业务需求，可以将上传的文件保存到本地文件系统、数据库或其他存储介质中。可以使用Java的IO操作或其他框架（如Apache Commons IO）来实现文件的保存。</li></ol><p>需要注意的是，文件上传可能会涉及到文件大小限制、文件类型限制、文件重命名、文件存储路径等问题。可以通过配置MultipartResolver的属性或在控制器中添加相应的验证逻辑来处理这些问题。</p><p>此外，Spring还提供了更高级的文件上传功能，例如支持同时上传多个文件、限制文件大小、处理文件上传进度等。可以根据具体需求，使用Spring提供的相关类和方法来实现更复杂的文件上传功能。</p><h2 id="2-sql-语句"><a href="#2-sql-语句" class="headerlink" title="2.sql 语句"></a>2.sql 语句</h2><h2 id="3-项目中都有什么包名"><a href="#3-项目中都有什么包名" class="headerlink" title="3.项目中都有什么包名"></a>3.项目中都有什么包名</h2><h2 id="4-controller-中都有什么注解"><a href="#4-controller-中都有什么注解" class="headerlink" title="4.controller 中都有什么注解"></a>4.controller 中都有什么注解</h2><p>@RestController,@Controller,@RequestMapping,@PostMapping,@RequestParam,@RequestBody,@PathVariable</p><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><h2 id="1-String-能不能-用-和equals-？"><a href="#1-String-能不能-用-和equals-？" class="headerlink" title="1.String 能不能 用&#x3D;&#x3D;和equals ？"></a>1.String 能不能 用&#x3D;&#x3D;和equals ？</h2><p>String可以用重写后的equals方法,用于进行字符串内容的比较<br>String用&#x3D;&#x3D;比较两对象的内存地址是否相等</p><h2 id="2-技术栈的都问了一边是干什么的？里面有什么用法？"><a href="#2-技术栈的都问了一边是干什么的？里面有什么用法？" class="headerlink" title="2.技术栈的都问了一边是干什么的？里面有什么用法？"></a>2.技术栈的都问了一边是干什么的？里面有什么用法？</h2><h2 id="3-Docker-命令"><a href="#3-Docker-命令" class="headerlink" title="3.Docker 命令"></a>3.Docker 命令</h2><h2 id="4-AJAX-做什么用的"><a href="#4-AJAX-做什么用的" class="headerlink" title="4.AJAX 做什么用的"></a>4.AJAX 做什么用的</h2><h2 id="5-你是怎么引入配置的？"><a href="#5-你是怎么引入配置的？" class="headerlink" title="5.你是怎么引入配置的？"></a>5.你是怎么引入配置的？</h2><h2 id="6-mybatis-中＄和-的区别"><a href="#6-mybatis-中＄和-的区别" class="headerlink" title="6.mybatis 中＄和#的区别"></a>6.mybatis 中＄和#的区别</h2><p>当id&#x3D;1时传进的参数为<br>#{id&#x3D;?}<br>${id&#x3D;1}</p><p>问题</p><h2 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h2><p>Redis 是一个开源的高性能键值存储系统，常用于缓存、消息队列、实时统计等场景。它支持多种数据结构和数据类型，包括以下基本数据类型：</p><ol><li>字符串（String）：字符串是 Redis 最基本的数据类型，可以存储任意类型的数据，如文本、数字等。字符串类型支持丰富的操作，如设置值、获取值、追加、计数器操作等。</li><li>列表（List）：列表是一个有序的字符串集合，可以在列表的两端进行元素的插入和删除操作。列表类型支持根据索引获取元素、获取列表长度、修剪列表等操作，还提供了一些特殊的操作，如弹出元素、阻塞式弹出等。</li><li>哈希（Hash）：哈希是一个键值对的集合，类似于关联数组。哈希类型适用于存储对象，每个对象可以包含多个字段和对应的值。哈希类型支持设置字段值、获取字段值、获取所有字段和值等操作。</li><li>集合（Set）：集合是一个无序的字符串集合，不允许重复的元素。集合类型支持添加元素、删除元素、判断元素是否存在、计算交集、并集、差集等操作。</li><li>有序集合（Sorted Set）：有序集合是一个有序的字符串集合，每个元素都关联一个分数，用于排序。有序集合类型支持添加元素、删除元素、根据分数范围获取元素、根据分数排序等操作。</li></ol><p>除了以上基本数据类型，Redis 还提供了一些其他的数据结构和数据类型，如位图（Bitmap）、超级日志（HyperLogLog）、地理位置（Geospatial）等，以满足不同场景下的需求。</p><p>使用 Redis，可以通过 Redis 客户端（如 Redis CLI、Redisson、Lettuce 等）或编程语言的 Redis 客户端库来与 Redis 服务器进行交互，执行各种数据操作和命令。通过合理地选择和使用 Redis 的数据类型，可以实现高效的数据存储和处理。</p><h2 id="消息队列的作用——我这里想"><a href="#消息队列的作用——我这里想" class="headerlink" title="消息队列的作用——我这里想"></a>消息队列的作用——我这里想</h2><h2 id="mysql-掌握程度，sql优化"><a href="#mysql-掌握程度，sql优化" class="headerlink" title="mysql 掌握程度，sql优化"></a>mysql 掌握程度，sql优化</h2><h2 id="服务器部署spring项目吗？"><a href="#服务器部署spring项目吗？" class="headerlink" title="服务器部署spring项目吗？"></a>服务器部署spring项目吗？</h2><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><hr><h1 id="图锐"><a href="#图锐" class="headerlink" title="图锐"></a>图锐</h1><h2 id="1-说一下链表"><a href="#1-说一下链表" class="headerlink" title="1.说一下链表"></a>1.说一下链表</h2><p>和数组是统一等级，LinkedList是链表，且插入和删除有优势，但循环遍历的效率不高</p><h2 id="2-什么是栈"><a href="#2-什么是栈" class="headerlink" title="2.什么是栈"></a>2.什么是栈</h2><p>能从栈顶进行进栈和出栈操作，后进先出</p><h2 id="3-说一下String是什么"><a href="#3-说一下String是什么" class="headerlink" title="3.说一下String是什么"></a>3.说一下String是什么</h2><p>底层是一个char类型的数组，不可继承</p><h2 id="4-String-StringBuffer-和-StringBuilder-的区别是什么"><a href="#4-String-StringBuffer-和-StringBuilder-的区别是什么" class="headerlink" title="4.String StringBuffer 和 StringBuilder 的区别是什么"></a>4.String StringBuffer 和 StringBuilder 的区别是什么</h2><p>StringBuffer对方法加了同步锁，或者对调用方法加了同步锁，线程是安全的<br>StringBuilder是没有对方法加同步锁，线程是不安全的<br>大批量数据单线程用StringBuilder<br>大批量数据多线程用StringBuffer</p><h2 id="5-字符串拼接的方法"><a href="#5-字符串拼接的方法" class="headerlink" title="5.字符串拼接的方法"></a>5.字符串拼接的方法</h2><p>用+进行拼接<br>stringBuffer的方法进行拼接<br>stringBuilder的方法进行拼接</p><h2 id="6-判断String字符串中是否有abc，字符串的截取"><a href="#6-判断String字符串中是否有abc，字符串的截取" class="headerlink" title="6.判断String字符串中是否有abc，字符串的截取"></a>6.判断String字符串中是否有abc，字符串的截取</h2><p>判断是否有abc：string.contains<br>字符串的截取：string.subString</p><h2 id="7-String类中的常用方法："><a href="#7-String类中的常用方法：" class="headerlink" title="7.String类中的常用方法："></a>7.String类中的常用方法：</h2><p>indexOf()：返回指定字符的索引。<br>charAt()：返回指定索引处的字符。<br>replace()：字符串替换。<br>trim()：去除字符串两端空白。<br>split()：分割字符串，返回一个分割后的字符串数组。<br>getBytes()：返回字符串的 byte 类型数组。<br>length()：返回字符串长度。<br>toLowerCase()：将字符串转成小写字母。<br>toUpperCase()：将字符串转成大写字符。<br>substring()：截取字符串。<br>equals()：字符串比较。</p><h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><p>20</p><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/46ae60.png" alt="图片说明"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//pre指针：用来指向反转后的节点，初始化为null</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">         <span class="comment">//当前节点指针</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//循环迭代</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//Cur_next 节点，永远指向当前节点cur的下一个节点</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">Cur_next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="comment">//反转的关键：当前的节点指向其前一个节点(注意这不是双向链表，没有前驱指针)</span></span><br><span class="line">            cur.next = pre;</span><br><span class="line">            <span class="comment">//更新pre</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            <span class="comment">//更新当前节点指针</span></span><br><span class="line">            cur = Cur_next ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为什么返回pre？因为pre是反转之后的头节点</span></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/d50072.png" alt="图片说明"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] MySort (<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for(int end=arr.length-1; end&gt;0; end--)&#123;//每次选出最大的放到最后，重复；</span></span><br><span class="line"><span class="comment">//            for(int i=0;i&lt;end;i++)&#123;</span></span><br><span class="line"><span class="comment">//                if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class="line"><span class="comment">//                    swap(arr,i,i+1);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[]arr,<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        tmp=arr[i];</span><br><span class="line">        arr[i]=arr[j];</span><br><span class="line">        arr[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*    public static void swap(int[] arr, int i, int j) &#123;</span></span><br><span class="line"><span class="comment">        arr[i] = arr[i] ^ arr[j];</span></span><br><span class="line"><span class="comment">        arr[j] = arr[i] ^ arr[j];</span></span><br><span class="line"><span class="comment">        arr[i] = arr[i] ^ arr[j];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h2><h3 id="2-说说面向对象的理解"><a href="#2-说说面向对象的理解" class="headerlink" title="2.说说面向对象的理解?"></a>2.说说面向对象的理解?</h3><p><strong>面向过程</strong>：<br>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式 开发、Linux&#x2F;Unix等一般采用面向过程开发，能是最重要的因素。<br>缺点：没有面向对象易维护、易复用、易扩展<br><strong>面向对象</strong>： 优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系 统，使系统更加灵活、更加易于维护<br>缺点：性能比面向过程低 面向过程是具体化的，流程化的，解决一个问题，你需要一步一步的分析，一步 一步的实现。</p><p>面向对象是模型化的，你只需抽象出一个类，这是一个封闭的盒子，在这里你拥有数据也拥有解决问题 的方法。需要什么功能直接使用就可以了，不必去一步一步的实现，至于这个功能是如何实现的，管我们什么事？我们会用就可以了。 面向对象的底层其实还是面向过程，把面向过程抽象成类，然后封装，方便我们使用的就是面向对象了。</p><h3 id="3-java-内存模型"><a href="#3-java-内存模型" class="headerlink" title="3.java 内存模型?"></a>3.java 内存模型?</h3><h3 id="4-垃圾回收的目的"><a href="#4-垃圾回收的目的" class="headerlink" title="4.垃圾回收的目的?"></a>4.垃圾回收的目的?</h3><p>垃圾回收的主要目的是自动管理内存，以减轻程序员的负担，并提高程序的可靠性和性能。以下是垃圾回收的几个目标：</p><ol><li>释放不再使用的内存：垃圾回收器负责检测和回收不再使用的内存空间。当对象不再被引用时，垃圾回收器可以自动将其标记为可回收，并释放其占用的内存。这减少了内存泄漏和内存溢出的风险，确保可用内存供其他对象使用。</li><li>简化内存管理：手动管理内存是一项复杂而容易出错的任务。垃圾回收机制使程序员从手动释放内存的责任中解放出来。程序员不再需要显式地跟踪和释放每个对象的内存，而是可以专注于业务逻辑的实现。这提高了开发效率，并降低了出现内存管理错误的可能性。</li><li>提高程序的可靠性：垃圾回收可以防止一些常见的内存错误，如空指针异常和野指针访问。通过自动检测和清理不再使用的对象，垃圾回收器减少了悬空引用和访问已释放内存的风险，从而提高了程序的稳定性和可靠性。</li><li>优化性能：垃圾回收器可以在运行时选择最佳时间来执行垃圾回收操作。它们通常在应用程序空闲时进行工作，以最小化对应用程序性能的影响。通过自动释放不再使用的内存，垃圾回收器可以减少内存碎片化并提高内存的利用率，从而改善程序的整体性能。</li></ol><p>总的来说，垃圾回收的目的是提供一种自动管理内存的机制，减轻程序员的负担，提高程序的可靠性和性能。它使内存管理变得更简单，减少了内存错误的风险，并优化了程序的执行效率。</p><h3 id="5-什么时候会进行垃圾回收"><a href="#5-什么时候会进行垃圾回收" class="headerlink" title="5.什么时候会进行垃圾回收?"></a>5.什么时候会进行垃圾回收?</h3><p>当对象不再被引用时，垃圾回收器可以自动将其标记为可回收，并释放其占用的内存。</p><h3 id="6-常用那些集合-有什么特点"><a href="#6-常用那些集合-有什么特点" class="headerlink" title="6.常用那些集合?有什么特点?"></a>6.常用那些集合?有什么特点?</h3><ol><li>ArrayList：基于数组实现的动态数组。它可以自动扩容，并支持随机访问元素。特点包括高效的随机访问和尾部插入&#x2F;删除操作，但在中间插入&#x2F;删除元素时效率较低。</li><li>LinkedList：基于链表实现的双向链表。它支持高效的插入&#x2F;删除操作，但访问任意位置的元素需要遍历链表。特点包括高效的插入&#x2F;删除操作，但随机访问的效率较低。</li><li>HashSet：基于哈希表实现的无序集合。它使用哈希函数来存储元素，具有快速的插入&#x2F;删除&#x2F;查找操作。特点包括无序性、不允许重复元素和高效的插入&#x2F;删除&#x2F;查找操作。</li><li>TreeSet：基于红黑树实现的有序集合。它可以按照元素的自然顺序或自定义比较器进行排序，并支持高效的插入&#x2F;删除&#x2F;查找操作。特点包括有序性、不允许重复元素和高效的插入&#x2F;删除&#x2F;查找操作。</li><li>HashMap：基于哈希表实现的无序键值对集合。它使用键的哈希值来存储和查找值，具有快速的插入&#x2F;删除&#x2F;查找操作。特点包括无序性、键唯一性和高效的插入&#x2F;删除&#x2F;查找操作。</li><li>TreeMap：基于红黑树实现的有序键值对集合。它可以按照键的自然顺序或自定义比较器进行排序，并支持高效的插入&#x2F;删除&#x2F;查找操作。特点包括有序性、键唯一性和高效的插入&#x2F;删除&#x2F;查找操作。</li></ol><p>这些集合类型具有不同的特点和适用场景：</p><ul><li>ArrayList 和 LinkedList 适用于需要频繁访问元素的场景。ArrayList 在随机访问和尾部插入&#x2F;删除操作上效率更高，而 LinkedList 在插入&#x2F;删除元素时效率更高。</li><li>HashSet 和 TreeSet 适用于需要<strong>存储唯一元素</strong>的场景。HashSet 提供了快速的插入&#x2F;删除&#x2F;查找操作，但不保证元素的顺序。TreeSet 提供了有序性和更多的检索功能，但插入&#x2F;删除操作稍慢。</li><li>HashMap 和 TreeMap 适用于存储键值对的场景。HashMap 提供了快速的插入&#x2F;删除&#x2F;查找操作，但不保证键的顺序。TreeMap 提供了有序性和更多的检索功能，但插入&#x2F;删除操作稍慢。</li></ul><p>根据具体的需求和性能要求，选择合适的集合类型可以提高程序的效率和可读性。</p><h3 id="7-Map可以存储重复数据么"><a href="#7-Map可以存储重复数据么" class="headerlink" title="7.Map可以存储重复数据么?"></a>7.Map可以存储重复数据么?</h3><p>map的key不能重复，value可以重复</p><h3 id="8-list-集合如何去重"><a href="#8-list-集合如何去重" class="headerlink" title="8.list 集合如何去重?"></a>8.list 集合如何去重?</h3><ol><li>使用Set集合：将List集合转换为Set集合，因为Set集合不允许重复元素，重复元素会被自动去除。可以使用<strong>HashSet</strong>或<strong>TreeSet</strong>来存储去重后的元素，并将List集合中的元素逐个添加到Set集合中。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list);</span><br><span class="line">List&lt;Integer&gt; deduplicatedList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(set);</span><br></pre></td></tr></table></figure><h3 id="9-Redis工作原理"><a href="#9-Redis工作原理" class="headerlink" title="9.Redis工作原理?"></a>9.Redis工作原理?</h3><ol><li>redis的五中基本数据类型： 答：string、hash、set、zset、list。<br>string,set,zset,list,hash</li></ol><h3 id="10-Redis如何优化登录流程-目的是什么-达到什么效果"><a href="#10-Redis如何优化登录流程-目的是什么-达到什么效果" class="headerlink" title="10.Redis如何优化登录流程?目的是什么? 达到什么效果?"></a>10.Redis如何优化登录流程?目的是什么? 达到什么效果?</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="MySQL怎么映射"><a href="#MySQL怎么映射" class="headerlink" title="MySQL怎么映射"></a>MySQL怎么映射</h3><ol><li>手动映射：最简单的方式是手动编写代码来处理数据表和对象之间的映射关系。通过使用SQL语句执行查询和更新操作，并将结果映射到对象的属性上，可以实现手动的数据映射。这种方式需要开发人员自行编写映射逻辑，比较灵活，但也需要更多的代码开发工作。</li><li>ORM框架：ORM（对象关系映射）框架可以自动处理数据表和对象之间的映射关系，提供了一种更高级的映射方式。在MySQL中，有一些常用的ORM框架可供选择，如Hibernate、Spring Data JPA、Sequelize等。这些框架提供了一套API和配置方式，可以简化数据库操作，并自动将数据表映射到对象上。</li><li>注解：一些ORM框架允许使用注解（Annotation）来标记对象和数据表之间的映射关系。通过在对象的属性或方法上添加注解，可以指定对应的数据表字段名、关联关系等信息，框架会根据注解来自动进行映射。这种方式可以在代码中直观地表示映射关系，减少了配置文件的使用。</li><li>XML配置：一些ORM框架使用XML配置文件来定义对象和数据表之间的映射关系。通过在配置文件中指定对象和数据表的对应关系、字段映射规则等信息，框架可以根据配置文件来进行映射。这种方式适用于需要更灵活配置的场景，但相对来说配置较为繁琐。</li></ol><h3 id="SpringBoot的工作原理"><a href="#SpringBoot的工作原理" class="headerlink" title="SpringBoot的工作原理"></a>SpringBoot的工作原理</h3><ol><li>自动配置：Spring Boot通过自动配置机制来简化应用程序的配置。它根据应用程序的依赖和类路径上的资源，自动配置Spring框架的各个模块和组件。例如，它会根据类路径上的数据库驱动依赖自动配置数据源和JPA，根据类路径上的Web依赖自动配置Web服务器和Servlet容器等。自动配置可以减少开发人员的配置工作，提高开发效率。</li><li>起步依赖：Spring Boot使用起步依赖（Starter Dependencies）来简化依赖管理。起步依赖是一组预配置的依赖项集合，它们提供了常见场景下所需的依赖，例如Web应用程序、数据库访问、安全性等。通过引入适当的起步依赖，开发人员可以轻松地获取所需的功能和依赖，而不需要手动配置和管理各个依赖项。</li><li>内嵌服务器：Spring Boot支持内嵌服务器，可以将应用程序打包为可执行的JAR文件，并直接运行在内嵌的Web服务器中，如Tomcat、Jetty等。这样可以简化应用程序的部署和运行，不需要额外安装和配置外部的Web服务器。</li><li>约定优于配置：Spring Boot遵循约定优于配置的原则，通过一些默认的约定来减少配置。例如，它会根据类路径上的资源和注解自动扫描组件，并进行相应的自动配置。开发人员只需要按照一些约定来编写代码和组织项目结构，就能够获得一些默认的配置和行为。</li><li>外部化配置：Spring Boot支持外部化配置，可以将应用程序的配置信息放在外部的配置文件中，如application.properties或application.yml。通过使用这些配置文件，开发人员可以在不修改代码的情况下修改应用程序的配置，例如数据库连接信息、日志级别等。</li><li>Actuator：Spring Boot提供了Actuator模块，用于监控和管理应用程序。Actuator可以提供有关应用程序运行状况、健康状况、性能指标等方面的信息，可以通过HTTP接口或JMX进行访问。通过Actuator，开发人员可以方便地监控和管理应用程序。</li></ol><h2 id="什么是事务的隔离级别？MySQL的默认隔离级别是什么？"><a href="#什么是事务的隔离级别？MySQL的默认隔离级别是什么？" class="headerlink" title="什么是事务的隔离级别？MySQL的默认隔离级别是什么？"></a>什么是事务的隔离级别？MySQL的默认隔离级别是什么？</h2><p>为了达到事务的四大特性，数据库定义了4种不同的事务隔离级别，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、 不可重复读、幻读这几类问题。<br><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/4d0073.png" alt="image-20230817175317428"></p><p>SQL 标准定义了四个隔离级别：<br><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，可能会导 致脏读、幻读或不可重复读。<br><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读 或不可重复读仍有可能发生。 <strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务 自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。<br><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执 行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。<br>这里需要注意的是：Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle默认采用的 READ_COMMITTED隔离级别<br>事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVVC（多版本并发控制），通过 保存修改的旧版本信息来支持并发一致性读和回滚等特性。<br>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是READ-COMMITTED(读 取提交内容):，但是你要知道的是InnoDB 存储引擎默认使用 REPEATABLE-READ（可重读）并不会有 任何性能损失。<br>InnoDB 存储引擎在 分布式事务 的情况下一般会用到SERIALIZABLE(可串行化)隔离级别。  </p><h2 id="String、StringBuffer、StringBuilder区别？"><a href="#String、StringBuffer、StringBuilder区别？" class="headerlink" title="String、StringBuffer、StringBuilder区别？"></a>String、StringBuffer、StringBuilder区别？</h2><ol><li><p>不可变性：</p><ul><li>String类是不可变的，即一旦创建了String对象，就不能修改它的值。每次对String对象进行修改时，都会创建一个新的String对象。</li><li>StringBuffer和StringBuilder类是可变的，可以对其进行修改和操作，而不会创建新的对象。</li></ul></li><li><p>线程安全性：</p><ul><li>String类是线程安全的，可以在多线程环境下共享和操作String对象。</li><li>StringBuffer类是线程安全的，提供了同步方法，可以在多线程环境下安全地进行字符串操作。</li><li>StringBuilder类不是线程安全的，不提供同步方法，适用于单线程环境下的字符串操作。</li></ul></li><li><p>性能：</p><ul><li>由于String类的不可变性，每次对String对象进行修改都会创建一个新的对象，频繁的字符串拼接操作会导致大量的对象创建和内存开销。</li><li>StringBuffer类在进行字符串操作时，会在原有对象的基础上进行修改，避免了对象的频繁创建，因此在字符串拼接操作较多或需要线程安全时，使用StringBuffer会更高效。</li><li>StringBuilder类与StringBuffer类类似，但不提供同步方法，因此在单线程环境下，StringBuilder的性能比StringBuffer稍高。</li></ul><h1 id="Redis-了解穿透，击穿，雪崩现象及其解决方案"><a href="#Redis-了解穿透，击穿，雪崩现象及其解决方案" class="headerlink" title="Redis.了解穿透，击穿，雪崩现象及其解决方案"></a>Redis.了解穿透，击穿，雪崩现象及其解决方案</h1><h3 id="1-Redis-穿透（Cache-Penetration）"><a href="#1-Redis-穿透（Cache-Penetration）" class="headerlink" title="1. Redis 穿透（Cache Penetration）"></a>1. Redis 穿透（Cache Penetration）</h3><p><strong>现象：</strong> 当一个请求查询一个不存在于缓存中的数据时，每次请求都会直接访问数据库，这可能导致数据库负载过高。</p><p><strong>原因：</strong> 请求查询的数据不存在于缓存中，但却在数据库中也不存在。</p><p><strong>解决方案：</strong></p><ul><li><strong>布隆过滤器（Bloom Filter）：</strong> 在请求到达缓存之前，使用布隆过滤器快速地判断查询的数据是否存在于数据库中，如果不存在，则直接返回，避免对数据库的查询。</li><li><strong>缓存空对象：</strong> 在缓存中存储那些不存在于数据库中的数据的键，但是值为空对象，这样可以防止针对同一无效数据的重复查询。</li></ul><h3 id="2-Redis-击穿（Cache-Breakdown）"><a href="#2-Redis-击穿（Cache-Breakdown）" class="headerlink" title="2. Redis 击穿（Cache Breakdown）"></a>2. Redis 击穿（Cache Breakdown）</h3><p><strong>现象：</strong> 在一个高并发的场景下，某个缓存失效时，大量的请求同时涌入，导致请求直接击穿到数据库上，造成数据库压力激增。</p><p><strong>原因：</strong> 缓存中某个热门数据过期后，大量的请求同时访问数据库。</p><p><strong>解决方案：</strong></p><ul><li><strong>互斥锁（Mutex Lock）：</strong> 在查询缓存失效时，使用互斥锁来保护对数据库的访问，只允许一个线程查询数据库，其他线程等待查询结果。</li><li><strong>预先加载（Preloading）：</strong> 在缓存失效前，提前加载该数据的新值到缓存中，或者设置较短但有一定冗余的过期时间，以减少缓存失效时的并发请求。</li></ul><h3 id="3-Redis-雪崩（Cache-Avalanche）"><a href="#3-Redis-雪崩（Cache-Avalanche）" class="headerlink" title="3. Redis 雪崩（Cache Avalanche）"></a>3. Redis 雪崩（Cache Avalanche）</h3><p><strong>现象：</strong> 在某个时间点，大量的缓存同时失效，导致大量请求涌入数据库，造成数据库瞬时压力过大。</p><p><strong>原因：</strong> 缓存中的大量数据在同一时间段内过期失效，导致大量请求同时涌入数据库。</p><p><strong>解决方案：</strong></p><ul><li><strong>分布式部署：</strong> 将缓存服务器进行分布式部署，使得不同缓存的失效时间不一致，减少因缓存同时失效而引发雪崩效应的概率。</li><li><strong>缓存失效时间随机化：</strong> 对缓存的失效时间进行随机化设置，使得缓存失效的时间分布更加均匀，减少集中失效的可能性。</li><li><strong>热点数据永不过期：</strong> 对于一些热点数据，设置其永不过期，或者采用异步更新的方式来更新热点数据，避免热点数据的集中失效。</li></ul><h1 id="1-基本数据类型（Primitive-Data-Types）："><a href="#1-基本数据类型（Primitive-Data-Types）：" class="headerlink" title="1. 基本数据类型（Primitive Data Types）："></a>1. 基本数据类型（Primitive Data Types）：</h1><p>Java 中的基本数据类型包括以下八种：</p><ol><li><strong>byte：</strong> 8 位，有符号，范围为 -128 到 127。</li><li><strong>short：</strong> 16 位，有符号，范围为 -32768 到 32767。</li><li><strong>int：</strong> 32 位，有符号，范围为 -2^31 到 2^31-1。</li><li><strong>long：</strong> 64 位，有符号，范围为 -2^63 到 2^63-1。</li><li><strong>float：</strong> 32 位，单精度浮点数。</li><li><strong>double：</strong> 64 位，双精度浮点数。</li><li><strong>char：</strong> 16 位，Unicode 字符。</li><li><strong>boolean：</strong> 表示逻辑值的类型，只有两个取值：true 和 false。</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-JDK和JRE-有什么区别？&quot;&gt;&lt;a href=&quot;#1-JDK和JRE-有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1.JDK和JRE 有什么区别？&quot;&gt;&lt;/a&gt;1.JDK和JRE 有什么区别？&lt;/h2&gt;&lt;p&gt;jvm是java虚拟机。JR</summary>
      
    
    
    
    
    <category term="-面试" scheme="https://xu-zi-kang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【docker】自动清理阿里云盘缓存</title>
    <link href="https://xu-zi-kang.github.io/2024/01/23/%E3%80%90docker%E3%80%91%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%BC%93%E5%AD%98/"/>
    <id>https://xu-zi-kang.github.io/2024/01/23/%E3%80%90docker%E3%80%91%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%BC%93%E5%AD%98/</id>
    <published>2024-01-23T08:40:49.000Z</published>
    <updated>2024-03-16T04:18:20.791Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模式0：每天自动清理一次。如果系统重启需要手动重新运行或把命令加入系统启动。</span><br><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -s https://xiaoyahelper.zngle.cf/aliyun_clear.sh | tail -n +2)</span>&quot;</span> -s 0 -tg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模式1：一次性清理，一般用于测试效果。</span><br><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -s https://xiaoyahelper.zngle.cf/aliyun_clear.sh | tail -n +2)</span>&quot;</span> -s 1 -tg</span><br></pre></td></tr></table></figure><h4 id="模式2：已废弃，不再支持"><a href="#模式2：已废弃，不再支持" class="headerlink" title="模式2：已废弃，不再支持"></a><del>模式2：已废弃，不再支持</del></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模式3：创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像</span><br><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -s https://xiaoyahelper.zngle.cf/aliyun_clear.sh | tail -n +2)</span>&quot;</span> -s 3 -tg</span><br></pre></td></tr></table></figure><p><del>模式4：同模式3</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模式5：与模式3的区别是实时清理，只要产生了播放缓存一分钟内立即清理。签到和定时升级同模式3</span><br><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -s https://xiaoyahelper.zngle.cf/aliyun_clear.sh | tail -n +2)</span>&quot;</span> -s 5 -tg</span><br></pre></td></tr></table></figure><h3 id="推荐模式3和模式5"><a href="#推荐模式3和模式5" class="headerlink" title="推荐模式3和模式5"></a>推荐模式3和模式5</h3><p> <em><strong>*发送验证码说明：*</strong></em></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以等待20秒，即自动跳过此部分，不影响正常使用。</span><br><span class="line">需要发送验证码的可以TG自行查找：xiaoyahelper_bot</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;</summary>
      
    
    
    
    
    <category term="-docker" scheme="https://xu-zi-kang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【git】完美解决git报错</title>
    <link href="https://xu-zi-kang.github.io/2024/01/23/%E3%80%90git%E3%80%91%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3git%E6%8A%A5%E9%94%99/"/>
    <id>https://xu-zi-kang.github.io/2024/01/23/%E3%80%90git%E3%80%91%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3git%E6%8A%A5%E9%94%99/</id>
    <published>2024-01-23T08:37:50.000Z</published>
    <updated>2024-03-16T04:16:46.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="完美解决-git报错fatal-unable-to-access-‘https-github-com-git‘-Recv-failure-Connection-was-reset"><a href="#完美解决-git报错fatal-unable-to-access-‘https-github-com-git‘-Recv-failure-Connection-was-reset" class="headerlink" title="完美解决 git报错fatal: unable to access ‘https://github.com/.../.git‘:Recv failure Connection was reset"></a>完美解决 git报错fatal: unable to access ‘<a href="https://github.com/.../.git%E2%80%98:Recv">https://github.com/.../.git‘:Recv</a> failure Connection was reset</h1><p>在使用git时，经常会碰到这个错误：fatal: unable to access ‘<a href="https://github.com/.../.git':Recv">https://github.com/.../.git&#39;:Recv</a> failure Connection was reset。</p><p>结合我个人最近的使用经验，提供两个方法，亲测有效。</p><p>方法一<br>该方法也是最常见的方法，那就是在终端执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy </span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>本人之前在使用git时，有些时候使用方法一就能解决问题，有些时候还是会报错，下面这个方法，能够完美地解决报错。</p><p><a href="https://so.csdn.net/so/search?q=%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE&spm=1001.2101.3001.7020">系统设置</a>搜索代理，然后点击编辑按钮：<br><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/3e80db.png" alt="在这里插入图片描述"></p><p>打开<a href="https://so.csdn.net/so/search?q=%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">代理服务器</a>，端口设置为<code>7890</code>，这个对你正常上网没有影响，可以放心设置。然后点击保存。</p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/2723b2.png" alt="在这里插入图片描述"></p><p>然后在终端输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>这样就大功告成了。可以在终端输入<code>git config --global -l</code>加以检验是否设置成功：</p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/41c5b9.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;完美解决-git报错fatal-unable-to-access-‘https-github-com-git‘-Recv-failure-Connection-was-reset&quot;&gt;&lt;a href=&quot;#完美解决-git报错fatal-unable-to-acces</summary>
      
    
    
    
    
    <category term="-git" scheme="https://xu-zi-kang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【git】生成sshKey密匙</title>
    <link href="https://xu-zi-kang.github.io/2024/01/23/%E3%80%90git%E3%80%91%E7%94%9F%E6%88%90sshKey%E5%AF%86%E5%8C%99/"/>
    <id>https://xu-zi-kang.github.io/2024/01/23/%E3%80%90git%E3%80%91%E7%94%9F%E6%88%90sshKey%E5%AF%86%E5%8C%99/</id>
    <published>2024-01-23T07:24:08.000Z</published>
    <updated>2024-03-16T04:17:10.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-生成ssh-key"><a href="#3-1-生成ssh-key" class="headerlink" title="3-1 生成ssh key"></a>3-1 生成ssh key</h2><p>首先检查是否已生成密钥 <code>cd ~/.ssh</code>，ls如果有2个文件，则密钥已经生成，id_rsa.pub就是公钥</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/ff7e40.png" alt="img"></p><p>也可以打开我的电脑C:\Users\Y\ .ssh 里面找到</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/57c7b6.png" alt="img"></p><p>如果没有生成，那么通过$ ssh-keygen -t rsa -C “<a href="mailto:&#120;&#120;&#120;&#120;&#120;&#120;&#64;&#x31;&#54;&#51;&#46;&#x63;&#111;&#109;">&#120;&#120;&#120;&#120;&#120;&#120;&#64;&#x31;&#54;&#51;&#46;&#x63;&#111;&#109;</a>”来生成。</p><p>1）是路径确认，直接按回车存默认路径即可</p><p>2）直接回车键，这里我们不使用密码进行登录, 用密码太麻烦;</p><p>3）直接回车键</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/440b62.png" alt="img"></p><p>生成成功后，去对应目录C:\Users\Y\ .ssh里（Y为电脑用户名，每个人不同）用记事本打开id_rsa.pub，得到ssh key公钥</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/c6ea3b.png" alt="img"></p><h2 id="3-2-为github账号配置ssh-key"><a href="#3-2-为github账号配置ssh-key" class="headerlink" title="3-2 为github账号配置ssh key"></a>3-2 为github账号配置ssh key</h2><p>切换到github，展开个人头像的小三角，点击settings</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/b6e5e3.png" alt="img"></p><p>然后打开SSH keys菜单， 点击Add SSH key新增密钥，填上标题，跟仓库保持一致吧，好区分。</p><p>接着将id_rsa.pub文件中key粘贴到此，最后Add key生成密钥吧。</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/d2a30c.png" alt="img"></p><p>如此，github账号的SSH keys配置完成。</p><p><img src="https://cdn.jsdelivr.usn/gh/Asakushen/pic/2024/03/07/44fb32.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-1-生成ssh-key&quot;&gt;&lt;a href=&quot;#3-1-生成ssh-key&quot; class=&quot;headerlink&quot; title=&quot;3-1 生成ssh key&quot;&gt;&lt;/a&gt;3-1 生成ssh key&lt;/h2&gt;&lt;p&gt;首先检查是否已生成密钥 &lt;code&gt;cd ~/.ss</summary>
      
    
    
    
    
    <category term="-git" scheme="https://xu-zi-kang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【docker】Portainer-docker图形化工具</title>
    <link href="https://xu-zi-kang.github.io/2024/01/21/%E3%80%90docker%E3%80%91Portainer-docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <id>https://xu-zi-kang.github.io/2024/01/21/%E3%80%90docker%E3%80%91Portainer-docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7/</id>
    <published>2024-01-21T12:07:14.000Z</published>
    <updated>2024-03-16T04:19:07.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-图形化工具-Portaine"><a href="#Docker-图形化工具-Portaine" class="headerlink" title="Docker 图形化工具 Portaine"></a>Docker 图形化工具 Portaine</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">之前操作Docker的时候，一直使用的是命令行的形式。命令行虽说看起来挺炫酷，但有时候还是挺麻烦的。今天给大家推荐一个Docker图形化工具[Portainer]，轻量级又好用，希望对大家有所帮助！</span><br></pre></td></tr></table></figure><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>直接使用Docker来安装Portainer是非常方便的，仅需要两步即可完成。</p></blockquote><ul><li>首先下载Portainer的Docker镜像；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br></pre></td></tr></table></figure><ul><li>然后再使用如下命令运行Portainer容器；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 8000:8000 --name portainer \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--restart=always \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-v /mydata/portainer/data:/data \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-d portainer/portainer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li><p>第一次登录的时候需要创建管理员账号，访问地址：<a href="http://ip:9000/">http://ip:9000/</a></p><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/ae0433.png" alt="img"></p></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>之后我们选择连接到本地的Docker环境，连接完成后我们就可以愉快地使用Portainer进行可视化管理了！</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/a25f59.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>登录成功后，可以发现有一个本地的Docker环境；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/f2b7c1.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>打开Dashboard菜单可以看到Docker环境的概览信息，比如运行了几个容器，有多少个镜像等；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/255c89.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>打开App Templates菜单可以看到很多创建容器的模板，通过模板设置下即可轻松创建容器，支持的应用还是挺多的；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/ebc1fa.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>打开Containers菜单，可以看到当前创建的容器，我们可以对容器进行运行、暂停、删除等操作；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/b945bb.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>选择一个容器，点击Logs按钮，可以直接查看容器运行日志，可以和docker logs命令说再见了；</li></ul><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/2e803b.png" alt="img"></p><ul><li>点击Inspect按钮，可以查看容器信息，比如看看容器运行的IP地址；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/3723a4.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>点击Stats按钮，可以查看容器的内存、CPU及网络的使用情况，性能分析不愁了；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/02d48b.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>点击Console按钮，可以进入到容器中去执行命令，比如我们可以进入到MySQL容器中去执行登录命令；</li></ul><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/a50d7c.png" alt="img"></p><ul><li>打开Images菜单，我们可以查看所有的本地镜像，对镜像进行管理；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/41c616.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>打开Networks菜单，可以查看Docker环境中的网络情况；</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/425bac.png" alt="img"></li></ul><p>吊炸天的 Docker 图形化工具 Portainer，必须推荐给你</p><ul><li>打开Users菜单，我们可以创建Portainer的用户，并给他们赋予相应的角色；</li></ul><p><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/b6fce6.png" alt="img"></p><ul><li>打开Registries菜单，我们可以配置自己的镜像仓库，这样在拉取镜像的时候，就可以选择从自己的镜像仓库拉取了。</li><li><img src="https://cdn.jsdelivr.us/gh/Asakushen/pic/2024/03/07/d146ca.png" alt="img"></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Portainer作为一款轻量级Docker图形化管理工具，功能强大且实用，要是有个私有镜像仓库管理功能就更好了，这样我们就不用安装重量级的镜像仓库<a href="https://so.csdn.net/so/search?q=Harbor&spm=1001.2101.3001.7020">Harbor</a>了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-图形化工具-Portaine&quot;&gt;&lt;a href=&quot;#Docker-图形化工具-Portaine&quot; class=&quot;headerlink&quot; title=&quot;Docker 图形化工具 Portaine&quot;&gt;&lt;/a&gt;Docker 图形化工具 Portaine&lt;/</summary>
      
    
    
    
    
    <category term="-docker" scheme="https://xu-zi-kang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【hexo】hexo报错解决办法</title>
    <link href="https://xu-zi-kang.github.io/2024/01/12/%E3%80%90hexo%E3%80%91hexo%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://xu-zi-kang.github.io/2024/01/12/%E3%80%90hexo%E3%80%91hexo%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2024-01-12T10:30:40.000Z</published>
    <updated>2024-03-16T04:16:19.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo发生error：spawn-failed错误的解决方法"><a href="#hexo发生error：spawn-failed错误的解决方法" class="headerlink" title="hexo发生error：spawn failed错误的解决方法"></a>hexo发生error：spawn failed错误的解决方法</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><ul><li>先是出现错误：<br><code>error：spawn failed...</code></li><li>然后经过一些博客的操作会出现以下问题：<br><code>fatal: cannot lock ref &#39;HEAD&#39;: unable to resolve reference HEAD: Invalid argument error: src refspec</code></li><li>或者：<br><code>error: src refspec HEAD does not match any.</code>等等</li><li>总结一下：<br>问题大多是因为git 进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</li></ul><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>1.删除<code>.deploy_git</code>文件夹;<br>2.输入<code>git config --global core.autocrlf false</code><br>3，然后，依次执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>问题解决。暴力直接，有效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo发生error：spawn-failed错误的解决方法&quot;&gt;&lt;a href=&quot;#hexo发生error：spawn-failed错误的解决方法&quot; class=&quot;headerlink&quot; title=&quot;hexo发生error：spawn failed错误的解决方</summary>
      
    
    
    
    
    <category term="-hexo" scheme="https://xu-zi-kang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Linux相关操作</title>
    <link href="https://xu-zi-kang.github.io/2024/01/12/%E3%80%90Linux%E3%80%91Linux%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>https://xu-zi-kang.github.io/2024/01/12/%E3%80%90Linux%E3%80%91Linux%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</id>
    <published>2024-01-12T08:09:34.000Z</published>
    <updated>2024-03-16T04:15:08.141Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ip:8888/baota">https://ip:8888/baota</a></p><p>1.查看面板入口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/bt default</span><br></pre></td></tr></table></figure><p>请输入新的面板密码：Xuzikang0917<br>|-用户名: ae9zbxss<br>|-新密码: Xuzikang0917</p><p>tar指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf [打的包的名称].tar [目录名称]  --打包</span><br><span class="line"></span><br><span class="line">tar -zcvf [想压缩的包的名称].tar.gz [压缩的目录]  --打包并压缩</span><br><span class="line"></span><br><span class="line">tar -xvf [需要解的包名].tar  --解包</span><br><span class="line"></span><br><span class="line">tar -zxvf [需要解压缩的压缩文件名].tar.gz  --解压缩包</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span>指令:</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> [想移动的文件名] [移动到哪个目录]/  --移动文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>指令:</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> [想转到的目录名]/ --转目录层</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .. --回到上一层目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span>指令:</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> [想创建的文件]  --创建文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span>指令:</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> [想创建的目录名称]  --创建目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf 文件夹名 --暴力删除</span><br><span class="line"></span><br><span class="line">vim指令:</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> nu  --给文件加行号</span><br><span class="line"></span><br><span class="line">防火墙:</span><br><span class="line">关 firewall-cmd --zone=public --add-port=6379/tcp --permanent  </span><br><span class="line">立即生效  firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>Windows：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 8082</span><br><span class="line"></span><br><span class="line">终端中输入taskkill /f /pid 13792，按下回车，即可杀死进程，释放端口。</span><br></pre></td></tr></table></figure><p>Linux：</p><pre><code>netstat -tln | grep 8083netstat  -anp  | grep  8083  # 显示正在使用Socket的程序识别码和程序名称kill -9 29686</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ip:8888/baota&quot;&gt;https://ip:8888/baota&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.查看面板入口：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
    <category term="-Linux" scheme="https://xu-zi-kang.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
